func build(checked_code: @Checked_Code) -> @IR_Code {
    let builder = create_ir_builder(checked_code)
    builder.build()
    return make @IR_Code(
        sources = checked_code.sources
        named_types = builder.types
        global_symbols = builder.context.symbols
    )
}

struct IR_Builder {
    checked_code: @Checked_Code
    context: @IR_Builder_Context
    root_context: @IR_Builder_Context
    types: @List[@IR_Type]
    functions = make @List[@IR_Function]()
    current_block: @IR_Block = null
    current_loop: @IR_Loop = null
    counter = make Counter[i64]()
    functions_counter = make Counter[i64]()
    types_counter = make Counter[i64]()
}

struct IR_Builder_Context {
    parent: @IR_Builder_Context
    symbols = make @List[@IR_Symbol]()
    type_arguments: @List[@Parsed_Type_Argument] = null
}

struct IR_Loop {
    parent: @IR_Loop
    end_block: @IR_Block
}

func create_ir_builder(checked_code: @Checked_Code) -> @IR_Builder {
    let types = make @List[@IR_Type]()
    types.append(make @IR_Any_Type(name = "Any"))
    types.append(make @IR_Boolean_Type(name = "bool"))
    types.append(make @IR_Int8_Type(name = "i8"))
    types.append(make @IR_Int16_Type(name = "i16"))
    types.append(make @IR_Int32_Type(name = "i32"))
    types.append(make @IR_Int64_Type(name = "i64"))
    types.append(make @IR_IntMax_Type(name = "isize"))
    types.append(make @IR_Nothing_Type(name = "Nothing"))
    types.append(make @IR_Null_Type(name = "Null"))
    types.append(make @IR_UInt8_Type(name = "u8"))
    types.append(make @IR_UInt16_Type(name = "u16"))
    types.append(make @IR_UInt32_Type(name = "u32"))
    types.append(make @IR_UInt64_Type(name = "u64"))
    types.append(make @IR_UIntMax_Type(name = "usize"))
    types.append(make @IR_Undefined_Type(name = "Undefined"))

    let context = make @IR_Builder_Context(parent = null)

    return make @IR_Builder(
        context = context
        root_context = context
        checked_code = checked_code
        types = types
    )
}

func build(self: @IR_Builder) -> Nothing {
    self.checked_code.global_symbols.for_each() {
        stderr.write(value.location).write(": ").debug().write(key).reset().end_line()
        abort(value.location, value.object_type)
    }
}

func convert_assignment_statement(self: @IR_Builder, statement: @Checked_Assignment_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_block_statement(self: @IR_Builder, statement: @Checked_Block_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_break_statement(self: @IR_Builder, statement: @Checked_Break_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_expression_statement(self: @IR_Builder, statement: @Checked_Expression_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_if_statement(self: @IR_Builder, statement: @Checked_If_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_loop_statement(self: @IR_Builder, statement: @Checked_Loop_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_return_statement(self: @IR_Builder, statement: @Checked_Return_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_variable_statement(self: @IR_Builder, statement: @Checked_Variable_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_while_statement(self: @IR_Builder, statement: @Checked_While_Statement) -> Nothing {
    abort(statement.location, statement.object_type)
}

func convert_add_expression(self: @IR_Builder, expression: @Checked_Add_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_array_access_expression(self: @IR_Builder, expression: @Checked_Array_Access_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_call_expression(self: @IR_Builder, expression: @Checked_Call_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_cast_expression(self: @IR_Builder, expression: @Checked_Cast_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_divide_expression(self: @IR_Builder, expression: @Checked_Divide_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_equals_expression(self: @IR_Builder, expression: @Checked_Equals_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_greater_than_expression(self: @IR_Builder, expression: @Checked_Greater_Than_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_greater_than_or_equals_expression(self: @IR_Builder, expression: @Checked_Greater_Than_Or_Equals_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_is_expression(self: @IR_Builder, expression: @Checked_Is_Expression) -> Nothing {
    abort(expression.location, expression.super.object_type)
}

func convert_less_than_expression(self: @IR_Builder, expression: @Checked_Less_Than_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_less_than_or_equals_expression(self: @IR_Builder, expression: @Checked_Less_Than_Or_Equals_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_literal_expression(self: @IR_Builder, expression: @Checked_Literal_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_logic_and_expression(self: @IR_Builder, expression: @Checked_Logic_And_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_logic_not_expression(self: @IR_Builder, expression: @Checked_Logic_Not_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_logic_or_expression(self: @IR_Builder, expression: @Checked_Logic_Or_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_make_expression(self: @IR_Builder, expression: @Checked_Make_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_member_access_expression(self: @IR_Builder, expression: @Checked_Member_Access_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_modulo_expression(self: @IR_Builder, expression: @Checked_Modulo_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_multiply_expression(self: @IR_Builder, expression: @Checked_Multiply_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_negate_expression(self: @IR_Builder, expression: @Checked_Negate_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_not_equals_expression(self: @IR_Builder, expression: @Checked_Not_Equals_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_substract_expression(self: @IR_Builder, expression: @Checked_Substract_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_symbol_expression(self: @IR_Builder, expression: @Checked_Symbol_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}

func convert_reference_expression(self: @IR_Builder, expression: @Checked_Reference_Expression) -> Nothing {
    abort(expression.location, expression.object_type)
}


