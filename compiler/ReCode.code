func main(argc: i32, argv: [[u8; ?]; ?]) -> Nothing {
    if argc < 3 {
        stdout.write("Usage:").end_line()
        stdout.write('\t').write(argv[0]).write(" [--ir] <INPUT FILE> <OUTPUT FILE>").end_line()
        exit(1)
    }

    let argument_index = 1
    let argument = create_string(argv[argument_index])

    let ir_mode = false
    if argument.equals("--ir") {
        ir_mode = true
        argument_index = argument_index + 1
        argument = create_string(argv[argument_index])
    }

    let source_file_path = argument
    if not source_file_path.ends_with(".code") {
        stdout.write("'").write(source_file_path).write("' doesn't end with '.code'.").end_line()
        exit(2)
    }

    let output_file_path = create_string(argv[argument_index + 1])
    let output_file: @FILE = null
    if output_file_path.equals("-") {
        output_file = stdout
    } else if ir_mode and not output_file_path.ends_with(".ir") {
        stdout.write("'").write(output_file_path).write("' doesn't end with '.ir'.").end_line()
        exit(3)
    } else if not output_file_path.ends_with(".s") {
        stdout.write("'").write(output_file_path).write("' doesn't end with '.s'.").end_line()
        exit(3)
    } else {
        output_file = fopen(output_file_path.data, "w".data)
        if output_file == null {
            stdout.write("Failed to open '").write(output_file_path).write("'.").end_line()
            exit(4)
        }
    }

    \ workaround until global variable initialization is implemented
    init_matchers()

    let parsed_code = parse(source_file_path)

    let checked_code = check(parsed_code)

    let ir_code = build(checked_code)
    if ir_mode {
        ir_code.dump(stdout)
        exit(0)
    }

    generate(ir_code, output_file)

    if not output_file_path.equals("-") {
        output_file.fclose()
    }
}

func abort(location: @Source_Location, unexpected_type: @Object_Type) -> Nothing {
    stderr.write(location).error().write(": Unexpected type: ").write(unexpected_type.name).reset().end_line()
    abort()
}

func abort(unexpected_type: @Object_Type) -> Nothing {
    stderr.error().write("Unexpected type: ").write(unexpected_type.name).reset().end_line()
    abort()
}

include "./code/compiler/Generator.code"

include "./code/compiler/IR_Builder.code"

include "./code/compiler/Checker.code"

include "./code/compiler/Parser.code"

include "./code/compiler/Scanner.code"

func abort(location: @Source_Location, message: @String) -> Nothing {
    stderr.write(location).write(": ").error().write(message).reset().end_line()
    abort()
}

include "./code/compiler/Token.code"

include "./code/compiler/Source.code"

include "./code/compiler/List.code"

func abort(message: @String) -> Nothing {
    stderr.error().write(message).reset().end_line()
    abort()
}

include "./code/lang/Object.code"
include "./code/lang/String.code"

include "./code/core/IO.code"
include "./code/core/Platform.code"

func debug(self: @FILE) -> @FILE {
    return self.write(27u8).write("[2;37m")
}

func warning(self: @FILE) -> @FILE {
    return self.write(27u8).write("[0;93m")
}

func error(self: @FILE) -> @FILE {
    return self.write(27u8).write("[0;91m")
}

func reset(self: @FILE) -> @FILE {
    return self.write(27u8).write("[0m")
}
