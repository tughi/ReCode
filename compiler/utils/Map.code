struct Map[K, V] {
    first_entry: @Map_Entry[K, V] = null
    last_entry: @Map_Entry[K, V] = null
}

struct Map_Entry[K, V] {
    key: K
    value: V
    prev_entry: @Map_Entry[K, V] = null
    next_entry: @Map_Entry[K, V] = null
}

func get[K, V](self: @Map[K, V], key: K) -> V {
    let entry = self.first_entry
    while entry != null {
        if equals(entry.key, key) {
            return entry.value
        }
        entry = entry.next_entry
    }
    return null
}

func has[K, V](self: @Map[K, V], key: K) -> bool {
    let entry = self.first_entry
    while entry != null {
        if equals(entry.key, key) {
            return true
        }
        entry = entry.next_entry
    }
    return false
}

func put[K, V](self: @Map[K, V], key: K, value: V) -> V {
    let entry = self.first_entry
    while entry != null {
        if equals(entry.key, key) {
            let old_value = entry.value
            entry.value = value
            return old_value
        }
        entry = entry.next_entry
    }
    entry = make @Map_Entry[K, V](key = key, value = value, prev_entry = self.last_entry)
    if self.last_entry == null {
        self.first_entry = entry
    } else {
        self.last_entry.next_entry = entry
    }
    self.last_entry = entry
    return null
}

func remove[K, V](self: @Map[K, V], key: K) -> V {
    let entry = self.first_entry
    while entry != null {
        if equals(entry.key, key) {
            return self.unlink(entry).value
        }
        entry = entry.next_entry
    }
    return null
}

func remove_values[K, V](self: @Map[K, V], value: V) -> Nothing {
    let entry = self.first_entry
    while entry != null {
        if entry.value == value {
            self.unlink(entry)
        }
        entry = entry.next_entry
    }
}

func unlink[K, V](self: @Map[K, V], entry: @Map_Entry[K, V]) -> @Map_Entry[K, V] {
    if entry.prev_entry != null {
        entry.prev_entry.next_entry = entry.next_entry
    } else {
        self.first_entry = entry.next_entry
    }
    if entry.next_entry != null {
        entry.next_entry.prev_entry = entry.prev_entry
    } else {
        self.last_entry = entry.prev_entry
    }
    return entry
}

func replace_values[K, V](self: @Map[K, V], old_value: V, new_value: V) -> Nothing {
    let entry = self.first_entry
    while entry != null {
        if entry.value == old_value {
            entry.value = new_value
        }
        entry = entry.next_entry
    }
}

macro for_each[K, V](self: @Map[K, V], block: macro (key: K, value: V)) {
    let entry = self.first_entry
    while entry != null {
        block(entry.key, entry.value)
        entry = entry.next_entry
    }
}

func equals(self: @Any, other: @Any) -> bool {
    return self == other
}
