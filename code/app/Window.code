\ Copyright (c) 2023, Stefan Selariu

include "code/app/Event.code"
include "code/graphics/Canvas.code"
include "code/widget/Widget.code"

struct Window {
    sdl_window: @SDL_Window = null

    title: @String
    width: i32
    height: i32

    canvas: @Canvas = null

    content: @Widget = null
    must_draw = true

    hovered_widget: @Widget = null
    pressed_widget: @Widget = null

    on_close = func (self: @Window) -> bool {
        return true
    }
}

func init(self: @Window) -> Nothing {
    self.sdl_window = SDL_CreateWindow(
        self.title.data
        SDL_WINDOWPOS_UNDEFINED
        SDL_WINDOWPOS_UNDEFINED
        self.width
        self.height
        SDL_WINDOW_RESIZABLE
    )
    if self.sdl_window == null {
        stderr.write("Failed to create window: ").write(SDL_GetError()).end_line()
        exit(1)
    }

    let sdl_window_surface = SDL_GetWindowSurface(self.sdl_window)
    if sdl_window_surface == null {
        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
        exit(1)
    }
    if sdl_window_surface.format.bits_per_pixel != 32 {
        stderr.write("Unsupported surface format").end_line()
        exit(1)
    }

    let width = sdl_window_surface.width
    let height = sdl_window_surface.height

    self.canvas = make @Canvas(
        pixels = sdl_window_surface.pixels
        width = width
        height = height
        clip_rect = make Rect()
    )
    self.canvas.clip_rect.set(0, 0, width - 1, height - 1)

    self.content.window = self
    self.content.layout(0, 0, self.width - 1, self.height - 1)
}

func set_content(self: @Window, content: @Widget) -> Nothing {
    self.content = content
    content.window = self
}

func dispatch_mouse_motion_event(self: @Window, sdl_event: @SDL_MouseMotionEvent) -> Nothing {
    let prev_hovered_widget = self.hovered_widget
    let event = make Mouse_Motion_Event(
        x = sdl_event.x
        y = sdl_event.y
    )

    self.content.dispatch_mouse_motion_event(@event)

    if self.hovered_widget != prev_hovered_widget {
        self.must_draw = true
    }
}

func dispatch_mouse_button_pressed_event(self: @Window, sdl_event: @SDL_MouseButtonEvent) -> Nothing {
    let event = make Mouse_Button_Pressed_Event(
        button = sdl_event.button
        x = sdl_event.x
        y = sdl_event.y
    )

    self.hovered_widget.on_mouse_button_pressed_event(@event)
}

func dispatch_mouse_button_released_event(self: @Window, sdl_event: @SDL_MouseButtonEvent) -> Nothing {
    let event = make Mouse_Button_Released_Event(
        button = sdl_event.button
        x = sdl_event.x
        y = sdl_event.y
    )

    self.hovered_widget.on_mouse_button_released_event(@event)
    if self.pressed_widget != null {
        self.pressed_widget.on_mouse_button_released_event(@event)
    }
}

func on_window_event(self: @Window, sdl_event: @SDL_WindowEvent) -> Nothing {
    if sdl_event.event == SDL_WINDOWEVENT_RESIZED {
        let sdl_window_surface = SDL_GetWindowSurface(self.sdl_window)
        if sdl_window_surface == null {
            stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
            exit(1)
        }
        let width = sdl_window_surface.width
        let height = sdl_window_surface.height
        self.width = width
        self.height = height
        self.canvas.pixels = sdl_window_surface.pixels
        self.canvas.width = width
        self.canvas.height = height
        self.canvas.clip_rect.set(0, 0, width - 1, height - 1)

        self.content.layout(0, 0, self.width - 1, self.height - 1)
        self.must_draw = true
    }
}

func draw(self: @Window) -> Nothing {
    self.content.draw(self.canvas)
    self.must_draw = false

    SDL_UpdateWindowSurface(self.sdl_window)
}
