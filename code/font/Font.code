\ Copyright (c) 2020-2021, 2023, Stefan Selariu

include "code/system/File.code"

let font: Font

struct Font {
    file: @String
    height: i32
    base_line: i32
    glyphs: [Glyph; 256]
}

struct Glyph {
    width: i32
    mask: [[u8; 9]; 18]
}

func init_font() -> Nothing {
    font.file = "code/font/Font.data"

    let file = open_file(font.file, "r")
    let line = make String()

    if not (file.read_line(@line) and line.starts_with("\\ Copyright ") and file.read_line(@line) and line.equals("")) {
        abort()
    }

    if not (file.read_line(@line) and line.starts_with("font.height: 18")) {
        abort()
    }
    font.height = 18

    if not (file.read_line(@line) and line.starts_with("font.base_line: 13")) {
        abort()
    }
    font.base_line = 13

    let index = 0isize
    while index < font.glyphs.length {
        font.glyphs[index].width = 9
        index = index + 1
    }

    while file.read_line(@line) {
        if not line.equals("") {
            abort()
        }

        if not file.read_line(@line) {
            break
        }

        if not line.starts_with("glyph: ") {
            abort()
        }
        let glyph = font.glyphs[line.data[line.length - 1]]

        if not (file.read_line(@line) and line.equals("glyph.width: 9")) {
            abort()
        }
        glyph.width = 9

        let glyph_row = 0
        while glyph_row < font.height and file.read_line(@line) {
            if line.length != 18usize {
                abort()
            }

            let glyph_column = 0
            while glyph_column < glyph.width {
                if line.data[glyph_column * 2] == 'F'.as(u8) and line.data[glyph_column * 2 + 1] == 'F'.as(u8) {
                    glyph.mask[glyph_row][glyph_column] = 0xffu8
                } else if line.data[glyph_column * 2] == '-'.as(u8) and line.data[glyph_column * 2 + 1] == '-'.as(u8) {
                    \ glyph.mask[glyph_row][glyph_column] = 0x00u8
                } else {
                    abort()
                }
                glyph_column = glyph_column + 1
            }

            glyph_row = glyph_row + 1
        }
    }

    file.close()
}

func save(self: @Font) -> Nothing {
    let file = open_file(self.file, "w")

    file.write("\\ Copyright (c) 2021, 2023, Stefan Selariu").end_line()
    file.end_line()
    file.write("font.height: ").write(font.height).end_line()
    file.write("font.base_line: ").write(font.base_line).end_line()

    let char = '!'.as(i32)
    while char < 127 {
        file.end_line()
        file.write("glyph: ").write(char.as(u8)).end_line()
        let glyph = font.glyphs[char]
        file.write("glyph.width: ").write(glyph.width).end_line()
        let row = 0isize
        while row < glyph.mask.length {
            let column = 0isize
            while column < glyph.mask[0].length {
                let alpha = glyph.mask[row][column].as(u32)
                if alpha > 0 {
                    if alpha < 0x10 {
                        file.write("-")
                    }
                    file.write(alpha, 16u8)
                } else {
                    file.write("--")
                }
                column = column + 1
            }
            file.end_line()
            row = row + 1
        }

        char = char + 1
    }

    file.close()
}
