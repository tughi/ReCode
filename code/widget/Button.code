\ Copyright (c) 2023, Stefan Selariu

include "code/widget/Style.code"
include "code/widget/Widget.code"

struct Button: Widget(
    compute_size_hint = compute_button_size_hint
    layout = layout_button
    draw = draw_button

    on_mouse_button_pressed_event = on_button_mouse_pressed_event
    on_mouse_button_released_event = func (self: @Button, event: @Mouse_Button_Released_Event) -> Nothing {
        if event.button == 1u8 and self.is_pressed() {
            self.window.pressed_widget = null
            if self.is_hovered() and self.on_click != null {
                self.on_click()
            }
            self.request_draw()
        }
    }
) {
    label: @String
    label_bounds = make Rect()

    is_pressed = false

    on_click: func (self: @Button) -> Nothing = null
}

func compute_button_size_hint(self: @Widget) -> Nothing {
    let self = self.as(@Button)
    if self.label_bounds.left == self.label_bounds.right {
        @font.compute_text_bounds(self.label, self.label_bounds)
    }
    self.width_hint = self.label_bounds.right - self.label_bounds.left + 21
    self.height_hint = self.label_bounds.bottom - self.label_bounds.top + 11
}

func layout_button(self: @Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self.as(@Button)
    self.layout_widget(left, top, right, bottom)

    self.label_bounds.set_location(
        (left + right + self.label_bounds.left - self.label_bounds.right) / 2
        (top + bottom + self.label_bounds.top - self.label_bounds.bottom) / 2
    )
}

func draw_button(self: @Widget, canvas: @Canvas) -> Nothing {
    let self = self.as(@Button)
    canvas.set_color(COLOR_BUTTON_SHADOW)
    canvas.draw_rect(self)

    if self.is_pressed() {
        canvas.set_color(COLOR_BUTTON_PRESSED)
        canvas.fill_rect(self.left + 1, self.top + 1, self.right - 1, self.bottom - 1)
    } else {
        canvas.set_color(COLOR_BUTTON_BORDER_LIGHT)
        canvas.draw_horizontal_line(self.left + 1, self.right - 2, self.top + 1)
        canvas.draw_vertical_line(self.left + 1, self.top + 2, self.bottom - 1)

        if self.is_hovered() {
            canvas.set_color(COLOR_BUTTON_HOVER)
        } else {
            canvas.set_color(COLOR_BACKGROUND)
        }
        canvas.fill_rect(self.left + 2, self.top + 2, self.right - 2, self.bottom - 2)

        canvas.set_color(COLOR_BUTTON_BORDER_DARK)
        canvas.draw_horizontal_line(self.left + 2, self.right - 1, self.bottom - 1)
        canvas.draw_vertical_line(self.right - 1, self.top + 1, self.bottom - 2)
    }

    canvas.set_color(COLOR_BUTTON_TEXT)
    canvas.draw_text(self.label, self.label_bounds.left, self.label_bounds.top)
}

func on_button_mouse_pressed_event(self: @Widget, event: @Mouse_Button_Pressed_Event) -> Nothing {
    if event.button == 1u8 {
        self.window.pressed_widget = self
        self.request_draw()
    }
}

