\ Copyright (c) 2023, Stefan Selariu

include "code/widget/Button.code"
include "code/widget/Style.code"
include "code/widget/Widget_Group.code"

define SCROLLBAR_BUTTON_SIZE = 21

func make_horizontal_scrollbar(content_size: i32, visible_size: i32, visible_from: i32, step: i32) -> @Horizontal_Scrollbar {
    let scrollbar = make @Horizontal_Scrollbar(
        content_size = content_size
        visible_size = visible_size
        visible_from = visible_from
        step = step
    )

    scrollbar.add(scrollbar.backward_button)
    scrollbar.add(scrollbar.knob_button)
    scrollbar.add(scrollbar.forward_button)

    return scrollbar
}

func make_vertical_scrollbar(content_size: i32, visible_size: i32, visible_from: i32, step: i32) -> @Vertical_Scrollbar {
    let scrollbar = make @Vertical_Scrollbar(
        content_size = content_size
        visible_size = visible_size
        visible_from = visible_from
        step = step
    )

    scrollbar.add(scrollbar.backward_button)
    scrollbar.add(scrollbar.knob_button)
    scrollbar.add(scrollbar.forward_button)

    return scrollbar
}

struct Scrollbar: Widget_Group {
    content_size: i32
    visible_size: i32
    visible_from: i32 \ max visible_from is (content_size - visible_size)
    step: i32

    backward_button = make Button(label = "", on_click = on_scrollbar_backward_button_click)
    forward_button = make Button(label = "", on_click = on_scrollbar_forward_button_click)
    knob_button: @Button

    layout_knob: func (self: @Scrollbar) -> Nothing
}

func on_scrollbar_backward_button_click(self: @Button) -> Nothing {
    let scrollbar = self.parent.as(@Scrollbar)
    scrollbar.visible_from = max(scrollbar.visible_from - scrollbar.step, 0)
    scrollbar.layout_knob()
    scrollbar.request_draw()
}

func on_scrollbar_forward_button_click(self: @Button) -> Nothing {
    let scrollbar = self.parent.as(@Scrollbar)
    scrollbar.visible_from = min(scrollbar.visible_from + scrollbar.step, scrollbar.content_size - scrollbar.visible_size)
    scrollbar.layout_knob()
    scrollbar.request_draw()
}

struct Horizontal_Scrollbar: Scrollbar(
    knob_button = make @Horizontal_Scrollbar_Knob()

    compute_size_hint = compute_horizontal_scrollbar_size_hint
    layout = layout_horizontal_scrollbar
    layout_knob = layout_horizontal_scrollbar_knob
    draw = draw_horizontal_scrollbar
) {
}

struct Vertical_Scrollbar: Scrollbar(
    knob_button = make @Vertical_Scrollbar_Knob()

    compute_size_hint = compute_vertical_scrollbar_size_hint
    layout = layout_vertical_scrollbar
    layout_knob = layout_vertical_scrollbar_knob
    draw = draw_vertical_scrollbar
) {
}

func compute_horizontal_scrollbar_size_hint(self: @Widget) -> Nothing {
    self.width_hint = 0
    self.height_hint = SCROLLBAR_BUTTON_SIZE
}

func compute_vertical_scrollbar_size_hint(self: @Widget) -> Nothing {
    self.width_hint = SCROLLBAR_BUTTON_SIZE
    self.height_hint = 0
}

func layout_horizontal_scrollbar(self: @Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self.as(@Horizontal_Scrollbar)

    self.layout_widget(left, top, right, bottom)

    self.backward_button.layout(left, top, left + SCROLLBAR_BUTTON_SIZE - 1, bottom)
    self.forward_button.layout(right - SCROLLBAR_BUTTON_SIZE + 1, top, right, bottom)

    self.layout_knob()
}

func layout_vertical_scrollbar(self: @Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self.as(@Vertical_Scrollbar)

    self.layout_widget(left, top, right, bottom)

    self.backward_button.layout(left, top, right, top + SCROLLBAR_BUTTON_SIZE - 1)
    self.forward_button.layout(left, bottom - SCROLLBAR_BUTTON_SIZE + 1, right, bottom)

    self.layout_knob()
}

func layout_horizontal_scrollbar_knob(self: @Widget) -> Nothing {
    let self = self.as(@Horizontal_Scrollbar)

    let track_width = self.forward_button.left - self.backward_button.right
    let knob_width = track_width * self.visible_size / self.content_size
    let knob_left = self.backward_button.right + track_width * self.visible_from / self.content_size
    let knob_right = knob_left + knob_width
    self.knob_button.layout(knob_left, self.top, knob_right, self.bottom)
}

func layout_vertical_scrollbar_knob(self: @Widget) -> Nothing {
    let self = self.as(@Vertical_Scrollbar)

    let track_height = self.forward_button.top - self.backward_button.bottom
    let knob_height = track_height * self.visible_size / self.content_size
    let knob_top = self.backward_button.bottom + track_height * self.visible_from / self.content_size
    let knob_bottom = knob_top + knob_height
    self.knob_button.layout(self.left, knob_top, self.right, knob_bottom)
}

func draw_horizontal_scrollbar(self: @Widget, canvas: @Canvas) -> Nothing {
    let self = self.as(@Horizontal_Scrollbar)

    self.draw_widget_group(canvas)

    \ left arrow
    canvas.set_color(COLOR_BUTTON_TEXT)
    canvas.draw_line(self.backward_button.left + 6, (self.backward_button.top + self.backward_button.bottom) / 2, self.backward_button.right - 7, self.backward_button.top + 6)
    canvas.draw_line(self.backward_button.left + 6, (self.backward_button.top + self.backward_button.bottom) / 2, self.backward_button.right - 7, self.backward_button.bottom - 6)
    canvas.draw_vertical_line(self.backward_button.right - 6, self.backward_button.top + 6, self.backward_button.bottom - 6)

    \ right arrow
    canvas.set_color(COLOR_BUTTON_TEXT)
    canvas.draw_line(self.forward_button.left + 7, self.forward_button.top + 6, self.forward_button.right - 6, (self.forward_button.top + self.forward_button.bottom) / 2)
    canvas.draw_line(self.forward_button.left + 7, self.forward_button.bottom - 6, self.forward_button.right - 6, (self.forward_button.top + self.forward_button.bottom) / 2)
    canvas.draw_vertical_line(self.forward_button.left + 6, self.forward_button.top + 6, self.forward_button.bottom - 6)

    \ track
    if self.knob_button.left > self.left + SCROLLBAR_BUTTON_SIZE {
        canvas.set_color(COLOR_BUTTON_SHADOW)
        canvas.draw_horizontal_line(self.backward_button.right + 1, self.knob_button.left - 1, self.top)
        canvas.draw_horizontal_line(self.backward_button.right + 1, self.knob_button.left - 1, self.bottom)
        canvas.set_color(COLOR_SCROLLBAR_TRACK)
        canvas.fill_rect(self.backward_button.right + 1, self.top + 1, self.knob_button.left - 1, self.bottom - 1)
    }
    if self.knob_button.right < self.right - SCROLLBAR_BUTTON_SIZE {
        canvas.set_color(COLOR_BUTTON_SHADOW)
        canvas.draw_horizontal_line(self.knob_button.right + 1, self.forward_button.left - 1, self.top)
        canvas.draw_horizontal_line(self.knob_button.right + 1, self.forward_button.left - 1, self.bottom)
        canvas.set_color(COLOR_SCROLLBAR_TRACK)
        canvas.fill_rect(self.knob_button.right + 1, self.top + 1, self.forward_button.left - 1, self.bottom - 1)
    }
}

func draw_vertical_scrollbar(self: @Widget, canvas: @Canvas) -> Nothing {
    let self = self.as(@Vertical_Scrollbar)

    self.draw_widget_group(canvas)

    \ up arrow
    canvas.set_color(COLOR_BUTTON_TEXT)
    canvas.draw_line((self.backward_button.left + self.backward_button.right) / 2, self.backward_button.top + 6, self.backward_button.left + 6, self.backward_button.bottom - 7)
    canvas.draw_line((self.backward_button.left + self.backward_button.right) / 2, self.backward_button.top + 6, self.backward_button.right - 6, self.backward_button.bottom - 7)
    canvas.draw_horizontal_line(self.backward_button.left + 6, self.backward_button.right - 6, self.backward_button.bottom - 6)

    \ down arrow
    canvas.draw_line(self.forward_button.left + 6, self.forward_button.top + 7, (self.forward_button.left + self.forward_button.right) / 2, self.forward_button.bottom - 6)
    canvas.draw_line(self.forward_button.right - 6, self.forward_button.top + 7, (self.forward_button.left + self.forward_button.right) / 2, self.forward_button.bottom - 6)
    canvas.draw_horizontal_line(self.forward_button.left + 6, self.forward_button.right - 6, self.forward_button.top + 6)

    \ track
    if self.knob_button.top > self.top + SCROLLBAR_BUTTON_SIZE {
        canvas.set_color(COLOR_BUTTON_SHADOW)
        canvas.draw_vertical_line(self.left, self.backward_button.bottom + 1, self.knob_button.top - 1)
        canvas.draw_vertical_line(self.right, self.backward_button.bottom + 1, self.knob_button.top - 1)
        canvas.set_color(COLOR_SCROLLBAR_TRACK)
        canvas.fill_rect(self.left + 1, self.backward_button.bottom + 1, self.right - 1, self.knob_button.top - 1)
    }
    if self.knob_button.bottom < self.bottom - SCROLLBAR_BUTTON_SIZE {
        canvas.set_color(COLOR_BUTTON_SHADOW)
        canvas.draw_vertical_line(self.left, self.knob_button.bottom + 1, self.forward_button.top - 1)
        canvas.draw_vertical_line(self.right, self.knob_button.bottom + 1, self.forward_button.top - 1)
        canvas.set_color(COLOR_SCROLLBAR_TRACK)
        canvas.fill_rect(self.left + 1, self.knob_button.bottom + 1, self.right - 1, self.forward_button.top - 1)
    }
}

struct Horizontal_Scrollbar_Knob: Button(
    label = ""

    on_mouse_button_pressed_event = func (self: @Horizontal_Scrollbar_Knob, event: @Mouse_Button_Pressed_Event) -> Nothing {
        self.mouse_motion_delta = event.x - self.left

        self.on_button_mouse_pressed_event(event)
    }

    on_mouse_motion_event = func (self: @Horizontal_Scrollbar_Knob, event: @Mouse_Motion_Event) -> Nothing {
        if self.is_pressed() {
            let scrollbar = self.parent.as(@Vertical_Scrollbar)
            let new_left = event.x - self.mouse_motion_delta
            if new_left < scrollbar.backward_button.right {
                new_left = scrollbar.backward_button.right
            } else if new_left + self.width() > scrollbar.forward_button.left + 1 {
                new_left = scrollbar.forward_button.left - self.width() + 1
            }

            let track_width = scrollbar.forward_button.left - scrollbar.backward_button.right
            scrollbar.visible_from = (new_left - scrollbar.backward_button.right) * scrollbar.content_size / track_width

            scrollbar.layout_knob()
            self.request_draw()
        }
    }
) {
    mouse_motion_delta: i32 = undefined
}

struct Vertical_Scrollbar_Knob: Button(
    label = ""

    on_mouse_button_pressed_event = func (self: @Vertical_Scrollbar_Knob, event: @Mouse_Button_Pressed_Event) -> Nothing {
        self.mouse_motion_delta = event.y - self.top

        self.on_button_mouse_pressed_event(event)
    }

    on_mouse_motion_event = func (self: @Vertical_Scrollbar_Knob, event: @Mouse_Motion_Event) -> Nothing {
        if self.is_pressed() {
            let scrollbar = self.parent.as(@Vertical_Scrollbar)
            let new_top = event.y - self.mouse_motion_delta
            if new_top < scrollbar.backward_button.bottom {
                new_top = scrollbar.backward_button.bottom
            } else if new_top + self.height() > scrollbar.forward_button.top + 1 {
                new_top = scrollbar.forward_button.top - self.height() + 1
            }

            let track_height = scrollbar.forward_button.top - scrollbar.backward_button.bottom
            scrollbar.visible_from = (new_top - scrollbar.backward_button.bottom) * scrollbar.content_size / track_height

            scrollbar.layout_knob()
            self.request_draw()
        }
    }
) {
    mouse_motion_delta: i32 = undefined
}
