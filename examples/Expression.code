include "./code/io/File.code"

struct Expression {
    dump: func (self: @Expression) -> Nothing
    evaluate: func (self: @Expression) -> i32 = null
}

struct Int_Expression: Expression(dump = dump_int, evaluate = evaluate_int) {
    value: i32
}

func dump_int(self: @Expression) -> Nothing {
    let self = self as @Int_Expression
    stdout.write(self.value)
}

func evaluate_int(self: @Expression) -> i32 {
    let self = self as @Int_Expression
    return self.value
}

struct Binary_Expression: Expression(dump = dump_binary_expression) {
    operator: @String
    left_expression: @Expression
    right_expression: @Expression
}

func dump_binary_expression(self: @Expression) -> Nothing {
    let self = self as @Binary_Expression
    stdout.write('(')
    self.left_expression.dump()
    stdout.write(' ').write(self.operator).write(' ')
    self.right_expression.dump()
    stdout.write(')')
}

struct Addition_Expression: Binary_Expression(operator = "+", evaluate = evaluate_addition) {
}

func evaluate_addition(self: @Expression) -> i32 {
    let self = self as @Addition_Expression
    return self.left_expression.evaluate() + self.right_expression.evaluate()
}

struct Substraction_Expression: Binary_Expression(operator = "-", evaluate = evaluate_substraction) {
}

func evaluate_substraction(self: @Expression) -> i32 {
    let self = self as @Substraction_Expression
    return self.left_expression.evaluate() - self.right_expression.evaluate()
}

func main() -> Nothing {
    let one = make @Int_Expression(value = 1)

    let expression: @Expression = make @Addition_Expression(
        left_expression = make @Int_Expression(
            value = 2
        )
        right_expression = make @Int_Expression(
            value = 3
        )
    )
    while (expression.evaluate() > 0) {
        expression = make @Substraction_Expression(
            left_expression = expression
            right_expression = one
        )
    }

    expression.dump()
    stdout.write(" = ").write(expression.evaluate()).end_line()
}
