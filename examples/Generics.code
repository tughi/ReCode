include "./code/lang/Object.code"

define main = func () -> Nothing {
    let map = make Map[Any, i32]()
    map.put("One", 0)
    map.put("One", 1)

    if (map.get("One") != 1) {
        abort()
    }

    let count = 0
    map.for_each() {
        count = count + 1
    }
    if (count != 1) {
        abort()
    }

    let map = make Special_Map()
    map.put("Two", 2)
    map.put("Three", 3)

    let sum = 0
    map.for_each() {
        sum = sum + item_value
    }
    if (sum != 5) {
        abort()
    }

    if (map.get("Three") != 3) {
        abort()
    }

    if (max(100, 2i32) != 100) {
        abort()
    }

    if (max(100u8, 2u8) != 100u8) {
        abort()
    }
}

define Special_Map = struct {
    extends Map[String, i32]
}

\ Map and Map[K, T] are different types
define Map = struct {
}

define Map = struct [K, V] {
    extends Object
    first_item: Map_Item[K, V] = null
    last_item: Map_Item[K, V] = null
}

define Map_Item = struct [K, V] {
    key: K
    value: V
    prev_item: Map_Item[K, V] = null
    next_item: Map_Item[K, V] = null
}

define abort = func () -> Nothing

define put = func [K, V] (self: Map[K, V], key: K, value: V) -> Nothing {
    let item = self.first_item
    while (item != null) {
        if (item.key == key) {
            item.value = value
            return
        }
        item = item.next_item
    }

    let item = make Map_Item[K, V](
        key = key
        value = value
        prev_item = self.last_item
    )
    if (self.first_item == null) {
        self.first_item = item
    } else {
        self.last_item.next_item = item
    }
    self.last_item = item
}

define get = func [K, V] (self: Map[K, V], key: K) -> V {
    self.for_each() {
        if (item_key == key) {
            return item_value
        }
    }
    abort()
}

define for_each = macro [K, V] (self: Map[K, V], block: macro (item_key: K, item_value: V)) {
    let item = self.first_item
    while (item != null) {
        block(item.key, item.value)
        item = item.next_item
    }
}

define max = func [T] (self: T, other: T) -> T {
    if (self < other) {
        return other
    }
    return self
}
