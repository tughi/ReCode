\ Copyright (c) 2020, Stefan Selariu

include "./Canvas.code"

let background_color: u32
let border_high_color: u32
let border_low_color: u32

define init_gui = func () -> Nothing {
    background_color = 0x336699u32
    border_high_color = background_color + 0x101010u32
    border_low_color = background_color - 0x101010u32

    init_font()
}

define View = struct {
    context: View_Context
    key: String = null
    canvas: Canvas
    bounds: !Rect = undefined
    action: u8 = undefined
    first_annon_child: View = null
    last_annon_child: View = null
    next_annon_child: View = null
    first_keyed_child: View = null
    next_view: View = null
}

define View_Context = struct {
    hovered_view: View = null
}

define Button = struct {
    extends View
}

define GUI_ACTION_FIRST = 1u8
define GUI_ACTION_INIT = 1u8
define GUI_ACTION_LAYOUT = 2u8
define GUI_ACTION_DRAW = 3u8
define GUI_ACTION_LAST = 3u8

define view = func (context: View, key: String) -> View {
    let child: View
    if (key != null) {
        child = context.first_keyed_child
        while (child != null && child.key == key) {
            child = child.next_view
        }
        if (child == null) {
            child = new View(
                context = context.context
                key = key
                canvas = context.canvas
                next_view = context.first_keyed_child
            )
            context.first_keyed_child = child
        }
    } else if (context.first_annon_child == null) {
        child = new View(
            context = context.context
            canvas = context.canvas
        )
        context.first_annon_child = child
        context.last_annon_child = child
    } else {
        child = context.next_annon_child
        if (child == null) {
            child = new View(
                context = context.context
                canvas = context.canvas
            )
            context.last_annon_child.next_view = child
            context.last_annon_child = child
        } else {
            context.next_annon_child = child.next_view
        }
    }
    child.action = context.action
    child.next_annon_child = child.first_annon_child
    return child
}

define on_mouse_moved = func (self: View, mouse_x: i32, mouse_y: i32) -> View {
    let hovered_view: View = null
    let child = self.first_annon_child
    while (child != null) {
        if (child.bounds.contains(mouse_x, mouse_y)) {
            hovered_view = child.on_mouse_moved(mouse_x, mouse_y)
        }
        child = child.next_view
    }
    if (hovered_view != null) {
        return hovered_view
    }
    return self
}

define button = func (context: View, key: String, label: String) -> Button {
    let view = context.view(key) as Button
    if (view.action == GUI_ACTION_DRAW) {
        let canvas = view.canvas
        canvas.set_color(background_color)
        canvas.fill_rect(view.bounds.left, view.bounds.top, view.bounds.right, view.bounds.bottom)
    }
    return view
}
