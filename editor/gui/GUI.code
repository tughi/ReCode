\ Copyright (c) 2021, Stefan Selariu

include "./Button.code"
include "./Event.code"
include "./Horizontal_Linear_Layout.code"
include "./Vertical_Linear_Layout.code"

define GUI = struct {
    extends GUI_Layout(
        name = "GUI"
        on_mouse_moved = func (self: GUI_Widget, event: GUI_Event_Mouse_Moved) -> Nothing {
            let self = self as GUI
            self.hovered_widget = self
            self.for_each_child() {
                child.on_mouse_moved(event)
            }
        }
        on_mouse_button_pressed = func (self: GUI, event: GUI_Event_Mouse_Button_Pressed) -> Nothing {
            self.hovered_widget.on_mouse_button_pressed(event)
        }
        on_mouse_button_released = func (self: GUI, event: GUI_Event_Mouse_Button_Released) -> Nothing {
            self.hovered_widget.on_mouse_button_released(event)
            self.pressed_widget = null
        }
        layout = func (self: GUI_Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
            let self = self as GUI

            self.if_size_changes(left, top, right, bottom) {
                let width_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_EXACTLY, size = right - left + 1)
                let height_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_EXACTLY, size = bottom - top + 1)
                self.for_each_child() {
                    child.measure(@width_spec, @height_spec)
                }
            }

            self.layout_widget(left, top, right, bottom)
            self.for_each_child() {
                child.layout(left, top, right, bottom)
            }
        }
    )
    hovered_widget: GUI_Widget
    pressed_widget: GUI_Widget = null
}

define init_gui = func () -> GUI {
    let gui = new GUI(gui = undefined, parent = null, hovered_widget = undefined)
    gui.gui = gui
    gui.hovered_widget = gui
    return gui
}
