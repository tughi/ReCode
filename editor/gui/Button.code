\ Copyright (c) 2021, Stefan Selariu

include "./Layout.code"

define button = func (parent: GUI_Layout, label: String) -> GUI_Button {
    let button = new GUI_Button(gui = parent.gui, parent = parent, label = label.clone())
    parent.add(button)
    label.compute_text_size(button.label_bounds)
    return button
}

define GUI_Button = struct {
    extends GUI_Widget(
        name = "GUI_Button"
        on_mouse_button_pressed = func (self: GUI_Widget, event: GUI_Event_Mouse_Button_Pressed) -> Nothing {
            if (event.button == 1u8) {
                self.gui.pressed_widget = self
                self.gui.post(new GUI_Event_Widget_Updated(widget = self))
            }
        }
        on_mouse_button_released = func (self: GUI_Widget, event: GUI_Event_Mouse_Button_Released) -> Nothing {
            if (self.gui.pressed_widget == self) {
                if (self.gui.hovered_widget == self) {
                    (self as GUI_Button).on_click()
                }
                self.gui.post(new GUI_Event_Widget_Updated(widget = self))
            }
        }
        measure = measure_button
        layout = layout_button
        draw = draw_button
    )
    label: String
    label_bounds: !Rect = Rect()

    on_click: func (self: GUI_Button) -> Nothing = func (self: GUI_Button) -> Nothing {
    }
}

define measure_button = func (self: GUI_Widget, width_spec: Measure_Spec, height_spec: Measure_Spec) -> Nothing {
    let self = self as GUI_Button

    if (width_spec.mode == MEASURE_SPEC_MODE_EXACTLY) {
        self.width_hint = width_spec.size
    } else if (width_spec.mode == MEASURE_SPEC_MODE_LIMITED) {
        self.width_hint = self.label_bounds.width + 16
        if (self.width_hint > width_spec.size) {
            self.width_hint = width_spec.size
        }
    } else if (width_spec.mode == MEASURE_SPEC_MODE_UNLIMITED) {
        self.width_hint = self.label_bounds.width + 16
    } else {
        self.abort("width", width_spec)
    }

    if (height_spec.mode == MEASURE_SPEC_MODE_EXACTLY) {
        self.height_hint = height_spec.size
    } else if (height_spec.mode == MEASURE_SPEC_MODE_UNLIMITED) {
        self.height_hint = self.label_bounds.height + 8
    } else {
        self.abort("height", height_spec)
    }

    \ stdout.write(self.name).write(" size hint: ").write(self.width_hint).write(" x ").write(self.height_hint).end_line()
}

define layout_button = func (self: GUI_Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self as GUI_Button
    self.bounds.set(left, top, right, bottom)
    self.label_bounds.set_location(left + (self.bounds.width - self.label_bounds.width) / 2, top + (self.bounds.height - self.label_bounds.height) / 2)
}

define draw_button = func (self: GUI_Widget, canvas: Canvas) -> Nothing {
    let is_hovered = self.gui.hovered_widget == self
    let is_pressed = self.gui.pressed_widget == self
    let self = self as GUI_Button

    define COLOR_SHADOW = 0x1a1a1au32
    define COLOR_LIGHT_BORDER = 0x676767u32
    define COLOR_DARK_BORDER = 0x333333u32
    define COLOR_BACKGROUND = 0x4d4d4du32
    define COLOR_TEXT = 0xe6e6e6u32

    canvas.set_color(COLOR_SHADOW)
    canvas.draw_rect(self.bounds)

    if (is_pressed) {
        canvas.set_color(COLOR_DARK_BORDER)
        canvas.fill_rect(self.bounds.left + 1, self.bounds.top + 1, self.bounds.right - 1, self.bounds.bottom - 1)
    } else {
        canvas.set_color(COLOR_LIGHT_BORDER)
        canvas.draw_horizontal_line(self.bounds.left + 1, self.bounds.right - 2, self.bounds.top + 1)
        canvas.draw_vertical_line(self.bounds.left + 1, self.bounds.top + 2, self.bounds.bottom - 2)

        if (is_hovered) {
            canvas.set_color(COLOR_LIGHT_BORDER)
        } else {
            canvas.set_color(COLOR_BACKGROUND)
        }
        canvas.fill_rect(self.bounds.left + 2, self.bounds.top + 2, self.bounds.right - 2, self.bounds.bottom - 2)
        canvas.draw_pixel(self.bounds.left + 1, self.bounds.bottom - 1)
        canvas.draw_pixel(self.bounds.right - 1, self.bounds.top + 1)

        canvas.set_color(COLOR_DARK_BORDER)
        canvas.draw_horizontal_line(self.bounds.left + 2, self.bounds.right - 1, self.bounds.bottom - 1)
        canvas.draw_vertical_line(self.bounds.right - 1, self.bounds.top + 2, self.bounds.bottom - 2)
    }

    canvas.set_color(COLOR_TEXT)
    canvas.draw_text(self.label, self.label_bounds.left, self.label_bounds.top)
}

define compute_text_size = func (text: String, text_size: Rect) -> Nothing {
    let line_height = font.height
    if (text.length > 0) {
        let width = 0
        let height = line_height
        let char_right = 0
        text.for_each_char() {
            if (char == '\n' as u8) {
                if (char_right > width) {
                    width = char_right
                }
                height = height + line_height
                char_right = 0
            } else {
                char_right = char_right + font.glyphs[char].width
            }
        }
        if (char_right > width) {
            width = char_right
        }
        text_size.set_size(width, height)
    } else {
        text_size.set_size(0, line_height)
    }
}
