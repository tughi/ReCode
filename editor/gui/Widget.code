\ Copyright (c) 2021, 2023, Stefan Selariu

include "../Canvas.code"

struct GUI_Widget {
    gui: @GUI
    name: @String
    parent: @GUI_Layout

    data: @GUI_Data = null

    width_hint = 0
    width_policy = make Size_Policy()
    height_hint = 0
    height_policy = make Size_Policy()

    bounds = make Rect()

    on_mouse_moved = func (self: @GUI_Widget, event: @GUI_Event_Mouse_Moved) -> Nothing {
        if self.bounds.contains(event.x, event.y) {
            self.gui.hovered_widget = self
        }
    }

    on_mouse_button_pressed = func (self: @GUI_Widget, event: @GUI_Event_Mouse_Button_Pressed) -> Nothing {
    }

    on_mouse_button_released = func (self: @GUI_Widget, event: @GUI_Event_Mouse_Button_Released) -> Nothing {
    }

    on_mouse_scrolled = func (self: @GUI_Widget, event: @GUI_Event_Mouse_Scrolled) -> Nothing {
    }

    measure = measure_widget
    layout = layout_widget
    draw = draw_widget
}

struct GUI_Data {
}

func measure_widget(self: @GUI_Widget, width_spec: @Measure_Spec, height_spec: @Measure_Spec) -> Nothing {
    stderr.write(self.name).write(" has no 'measure' function").end_line()
}

func layout_widget(self: @GUI_Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    self.bounds.set(left, top, right, bottom)
}

func draw_widget(self: @GUI_Widget, canvas: @Canvas) -> Nothing {
    canvas.set_color(0xff0000u32)
    canvas.draw_rect(self.bounds)
}

struct Size_Policy {
    mode = SIZE_POLICY_MODE_WRAP_CONTENT
    size = 0
}

define SIZE_POLICY_MODE_FIXED = 0u8
define SIZE_POLICY_MODE_STRETCHED = 1u8
define SIZE_POLICY_MODE_WRAP_CONTENT = 2u8

struct Measure_Spec {
    mode = MEASURE_SPEC_MODE_EXACTLY
    size = 0
}

define MEASURE_SPEC_MODE_EXACTLY = 0u8
define MEASURE_SPEC_MODE_LIMITED = 1u8
define MEASURE_SPEC_MODE_UNLIMITED = 2u8

macro if_size_changes(self: @GUI_Widget, left: i32, top: i32, right: i32, bottom: i32, action: macro ()) {
    let bounds = self.bounds
    if bounds.width != right - left + 1 or bounds.height != bottom - top + 1 {
        action()
    }
}

func abort(self: @GUI_Widget, measure: @String, measure_spec: @Measure_Spec) -> Nothing {
    stderr.write(self.name).write(" cannot handle ").write(measure).write(" spec: ").write("mode=")
    if measure_spec.mode == MEASURE_SPEC_MODE_EXACTLY {
        stderr.write("EXACTLY").write(", size=").write(measure_spec.size)
    } else if measure_spec.mode == MEASURE_SPEC_MODE_LIMITED {
        stderr.write("LIMITED").write(", size=").write(measure_spec.size)
    } else if measure_spec.mode == MEASURE_SPEC_MODE_UNLIMITED {
        stderr.write("UNLIMITED")
    } else {
        stderr.write("???")
    }
    stderr.end_line()
    abort()
}

func abort(self: @GUI_Widget, measure: @String, size_policy: @Size_Policy) -> Nothing {
    stderr.write(self.name).write(" cannot handle ").write(measure).write(" policy: ").write("mode=")
    if size_policy.mode == SIZE_POLICY_MODE_FIXED {
        stderr.write("FIXED").write(", size=").write(size_policy.size)
    } else if size_policy.mode == SIZE_POLICY_MODE_STRETCHED {
        stderr.write("STRETCHED")
    } else if size_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT {
        stderr.write("WRAP_CONTENT")
    } else {
        stderr.write("???")
    }
    stderr.end_line()
    abort()
}
