\ Copyright (c) 2020-2021, 2023, Stefan Selariu

func font_editor(gui: @GUI) -> Nothing {
    let glyph_editor: @Glyph_Editor
    let save_button: @GUI_Button

    gui.horizontal_linear_layout() {
        gui.margin = 32
        gui.spacing = 32

        gui.vertical_linear_layout() {
            gui.spacing = 32

            glyph_editor = gui.glyph_editor(font.glyphs['A'.as(u8)])

            save_button = gui.button("Save")
            save_button.width_policy = make Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            save_button.on_click = func (self: @GUI_Button) -> Nothing {
                @font.save()
            }
        }

        gui.vertical_linear_layout() {
            gui.width_policy = make Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            gui.height_policy = make Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            gui.spacing = 32

            let glyph_chooser = gui.glyph_chooser('A'.as(u8))
            glyph_chooser.width_policy = make Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            glyph_chooser.data = make @Glyph_Chooser_Data(glyph_editor = glyph_editor)
            glyph_chooser.handle_glyph_selected = func (self: @Glyph_Chooser, glyph: u8) -> Nothing {
                let glyph_editor = self.data.as(@Glyph_Chooser_Data).glyph_editor
                glyph_editor.glyph = font.glyphs[glyph]
                glyph_editor.gui.post(make @GUI_Event_Widget_Updated(widget = glyph_editor))
            }

            let text = gui.text(text)
            text.width_policy = make Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            text.height_policy = make Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
        }
    }
}
