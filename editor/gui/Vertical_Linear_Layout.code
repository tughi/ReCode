\ Copyright (c) 2021, Stefan Selariu

include "./Layout.code"

define GUI_Vertical_Linear_Layout = struct {
    extends GUI_Layout(
        name = "GUI_Vertical_Linear_Layout"
        measure = measure_vertical_linear_layout
        layout = layout_vertical_linear_layout
    )
    margin: i32 = 0
    spacing: i32 = 0
}

define measure_vertical_linear_layout = func (self: GUI_Widget, width_spec: Measure_Spec, height_spec: Measure_Spec) -> Nothing {
    let self = self as GUI_Horizontal_Linear_Layout

    if (width_spec.mode == MEASURE_SPEC_MODE_EXACTLY) {
        self.width_hint = width_spec.size
    } else if (width_spec.mode == MEASURE_SPEC_MODE_UNLIMITED) {
        if (self.children_count > 0) {
            let max_child_width = 0
            self.for_each_child() {
                let child_width_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_UNLIMITED)
                let child_height_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_UNLIMITED)
                child.measure(@child_width_spec, @child_height_spec)
                if (child.width_hint > max_child_width) {
                    max_child_width = child.width_hint
                }
            }
            self.width_hint = max_child_width + self.margin * 2
        } else {
            self.width_hint = self.margin * 2
        }
    } else {
        self.abort("width", width_spec)
    }

    if (height_spec.mode == MEASURE_SPEC_MODE_EXACTLY) {
        self.height_hint = height_spec.size
    } else if (height_spec.mode == MEASURE_SPEC_MODE_LIMITED) {
        if (self.height_policy.mode == SIZE_POLICY_MODE_FIXED) {
            if (self.height_policy.size > height_spec.size) {
                self.height_hint = height_spec.size
            } else {
                self.height_hint = self.height_policy.size
            }
        } else if (self.height_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
            self.height_hint = self.margin * 2
            if (self.children_count > 0) {
                self.height_hint = self.height_hint + self.spacing * (self.children_count - 1)
                let child_width_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_LIMITED, size = self.width_hint - self.margin * 2)
                self.for_each_child() {
                    let child_height_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_UNLIMITED)
                    child.measure(@child_width_spec, @child_height_spec)
                    self.height_hint = self.height_hint + child.height_hint
                }
            }
            if (self.height_hint > height_spec.size) {
                self.height_hint = height_spec.size
            }
        } else {
            self.abort("height", self.height_policy)
        }
    } else {
        self.abort("height", height_spec)
    }

    \ stdout.write(self.name).write(" size hint: ").write(self.width_hint).write(" x ").write(self.height_hint).end_line()
}

define layout_vertical_linear_layout = func (self: GUI_Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self as GUI_Vertical_Linear_Layout
    self.bounds.set(left, top, right, bottom)
    if (self.children_count > 0) {
        let stretched_height = self.bounds.height - self.margin * 2 - self.spacing * (self.children_count - 1)
        let stretched_children = 0
        self.for_each_child() {
            if (child.height_policy.mode == SIZE_POLICY_MODE_FIXED) {
                stretched_height = stretched_height - child.height_policy.size
            } else if (child.height_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
                let child_width_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_LIMITED, size = self.bounds.width - self.margin * 2)
                let child_height_spec = Measure_Spec(mode = MEASURE_SPEC_MODE_UNLIMITED)
                child.measure(@child_width_spec, @child_height_spec)
                stretched_height = stretched_height - child.height_hint
            } else {
                stretched_children = stretched_children + 1
            }
        }

        let child_left = left + self.margin
        let child_top = top + self.margin
        self.for_each_child() {
            let child_right: i32
            if (child.width_policy.mode == SIZE_POLICY_MODE_FIXED) {
                child_right = child_left + child.width_policy.size - 1
            } else if (child.width_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
                child_right = child_left + child.width_hint - 1
            } else {
                child_right = right - self.margin
            }
            let child_bottom: i32
            if (child.height_policy.mode == SIZE_POLICY_MODE_FIXED) {
                child_bottom = child_top + child.height_policy.size - 1
            } else if (child.height_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
                child_bottom = child_top + child.height_hint - 1
            } else {
                child_bottom = child_top + stretched_height / stretched_children - 1
            }
            child.layout(child_left, child_top, child_right, child_bottom)
            child_top = child_bottom + 1 + self.spacing
        }
    }
}

define vertical_linear_layout = macro (parent: GUI_Layout, content: macro (gui: GUI_Vertical_Linear_Layout)) {
    let linear_layout = new GUI_Vertical_Linear_Layout(gui = parent.gui, parent = parent)
    parent.add(linear_layout)
    linear_layout.content()
}
