\ Copyright (c) 2021, Stefan Selariu

include "./Layout.code"

define GUI_Horizontal_Linear_Layout = struct {
    extends GUI_Layout(
        name = "GUI_Horizontal_Linear_Layout"
        layout = layout_horizontal_linear_layout
    )
    margin: i32 = 0
    spacing: i32 = 0
}

define layout_horizontal_linear_layout = func (self: GUI_Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self as GUI_Horizontal_Linear_Layout
    self.bounds.set(left, top, right, bottom)
    if (self.children_count > 0) {
        let stretched_width = self.bounds.width - self.margin * 2 - self.spacing * (self.children_count - 1)
        let stretched_children = 0
        self.for_each_child() {
            if (child.width_policy.mode == SIZE_POLICY_MODE_FIXED) {
                stretched_width = stretched_width - child.width_policy.size
            } else if (child.width_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
                stretched_width = stretched_width - child.width_hint
            } else {
                stretched_children = stretched_children + 1
            }
        }

        let child_left = left + self.margin
        let child_top = top + self.margin
        self.for_each_child() {
            let child_right: i32
            if (child.width_policy.mode == SIZE_POLICY_MODE_FIXED) {
                child_right = child_left + child.width_policy.size - 1
            } else if (child.width_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
                child_right = child_left + child.width_hint - 1
            } else {
                child_right = child_left + stretched_width / stretched_children - 1
            }
            let child_bottom: i32
            if (child.height_policy.mode == SIZE_POLICY_MODE_FIXED) {
                child_bottom = child_top + child.height_policy.size - 1
            } else if (child.height_policy.mode == SIZE_POLICY_MODE_WRAP_CONTENT) {
                child_bottom = child_top + child.height_hint - 1
            } else {
                child_bottom = bottom - self.margin
            }
            child.layout(child_left, child_top, child_right, child_bottom)
            child_left = child_right + 1 + self.spacing
        }
    }
}

define horizontal_linear_layout = macro (parent: GUI_Layout, content: macro (gui: GUI_Horizontal_Linear_Layout)) {
    let linear_layout = new GUI_Horizontal_Linear_Layout(parent = parent)
    parent.add(linear_layout)
    linear_layout.content()
    if (linear_layout.children_count > 0) {
        let children_width = 0
        let children_height = 0
        linear_layout.for_each_child() {
            children_width = children_width + child.width_hint
            if (children_height < child.height_hint) {
                children_height = child.height_hint
            }
        }
        linear_layout.width_hint = linear_layout.margin * 2 + children_width + linear_layout.spacing * (linear_layout.children_count - 1)
        linear_layout.height_hint = linear_layout.margin * 2 + children_height
    } else {
        linear_layout.width_hint = linear_layout.margin * 2
        linear_layout.height_hint = linear_layout.margin * 2
    }
    stdout.write(linear_layout.width_hint).write("x").write(linear_layout.height_hint).end_line()
}
