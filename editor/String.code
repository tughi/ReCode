\ Copyright (c) 2020-2021, 2023, Stefan Selariu

include "./LibC.code"

struct String {
    data = malloc(16usize) as [u8; ?]
    data_size = 16usize
    length = 0usize
}

func clear(self: @String) -> @String {
    self.length = 0
    self.data[0] = 0u8
    return self
}

func clone(self: @String) -> @String {
    let other = make @String(
        data = malloc(self.length + 1) as [u8; ?]
        data_size = self.length + 1
        length = self.length
    )
    let index = 0usize
    while index <= self.length {
        other.data[index] = self.data[index]
        index = index + 1
    }
    return other
}

func copy(self: @String, other: @String) -> @String {
    if self.data_size < other.length + 1 {
        self.data_size = other.length + 1
        self.data = realloc(self.data, self.data_size) as [u8; ?]
    }
    let index = 0usize
    while index <= other.length {
        self.data[index] = other.data[index]
        index = index + 1
    }
    self.length = other.length
    return self
}

func equals(self: @String, other: @String) -> bool {
    if other == null or self.length != other.length {
        return false
    }
    let index = 0usize
    while index < self.length {
        if self.data[index] != other.data[index] {
            return false
        }
        index = index + 1
    }
    return true
}

func starts_with(self: @String, other: @String) -> bool {
    if self.length < other.length {
        return false
    }
    let index = 0usize
    while index < other.length {
        if self.data[index] != other.data[index] {
            return false
        }
        index = index + 1
    }
    return true
}

func append(self: @String, char: u8) -> @String {
    if self.length + 1 >= self.data_size {
        self.data_size = self.data_size + 16
        self.data = realloc(self.data, self.data_size) as [u8; ?]
    }
    self.data[self.length] = char
    self.length = self.length + 1
    self.data[self.length] = 0u8
    return self
}

macro for_each_char(self: @String, handler: macro (char: u8)) {
    let index = 0
    let length = self.length as i32
    while index < length {
        handler(self.data[index])
        index = index + 1
    }
}
