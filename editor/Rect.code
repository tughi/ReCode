\ Copyright (c) 2020-2021, 2023, Stefan Selariu

include "./Math.code"

struct Rect {
    left: i32 = undefined
    top: i32 = undefined
    right: i32 = undefined
    bottom: i32 = undefined
    width: i32 = undefined
    height: i32 = undefined
}

func reference(self: @Rect) -> @Rect {
    return self
}

func contains(self: @Rect, x: i32, y: i32) -> bool {
    return self.left <= x and x <= self.right and self.top <= y and y <= self.bottom
}

func set(self: @Rect, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    self.left = left
    self.top = top
    self.right = right
    self.bottom = bottom
    self.width = right - left + 1
    self.height = bottom - top + 1
}

func set(self: @Rect, other: @Rect) -> Nothing {
    self.set(other.left, other.top, other.right, other.bottom)
}

func set_location(self: @Rect, left: i32, top: i32) -> Nothing {
    self.left = left
    self.top = top
    self.right = left + self.width - 1
    self.bottom = top + self.height - 1
}

func set_size(self: @Rect, width: i32, height: i32) -> Nothing {
    if (width < 1) {
        self.width = 1
        self.right = self.left
    } else {
        self.width = width
        self.right = self.left + width - 1
    }
    if (height < 1) {
        self.height = 1
        self.bottom = self.top
    } else {
        self.height = height
        self.bottom = self.top + height - 1
    }
}

func intersect(self: @Rect, other: @Rect) -> Nothing {
    let new_left = max(self.left, other.left)
    let new_right = min(self.right, other.right)
    if (new_left > new_right) {
        abort()
    }
    let new_top = max(self.top, other.top)
    let new_bottom = min(self.bottom, other.bottom)
    if (new_top > new_bottom) {
        abort()
    }
    self.set(new_left, new_top, new_right, new_bottom)
}

func intersects(self: @Rect, other: @Rect) -> bool {
    if (self.left > other.right or self.top > other.bottom or self.right < other.left or self.bottom < other.top) {
        return false
    }
    return true
}

func write(file: @FILE, rect: @Rect) -> @FILE {
    return file.write("[(").write(rect.left).write(", ").write(rect.top).write(") x (").write(rect.right).write(", ").write(rect.bottom).write(")]")
}
