\ Copyright (c) 2020-2021, 2023, Stefan Selariu

include "./File.code"
include "./gui/Layout.code"

define COLOR_BACKGROUND = 0x333333u32
define COLOR_TEXT = 0xbfbfafu32

define glyph_editor = func (parent: GUI_Layout, glyph: Glyph) -> Glyph_Editor {
    let glyph_editor = make Glyph_Editor(gui = parent.gui, parent = parent, glyph = glyph)
    parent.add(glyph_editor)

    let glyph_rows = glyph.mask.length as i32
    let glyph_columns = glyph.mask[0].length as i32
    glyph_editor.width_hint = (glyph_editor.pixel_size + 1) * glyph_columns + 1
    glyph_editor.height_hint = (glyph_editor.pixel_size + 1) * glyph_rows + 1

    return glyph_editor
}

struct Glyph_Editor {
    extends GUI_Widget(
        name = "Glyph_Editor"
        on_mouse_moved = func (self: GUI_Widget, event: GUI_Event_Mouse_Moved) -> Nothing {
            let self = self as Glyph_Editor
            let last_hovered_row = self.hovered_row
            let last_hovered_column = self.hovered_column
            if (self.bounds.contains(event.x, event.y) && event.x < self.bounds.right && event.y < self.bounds.bottom) {
                self.gui.hovered_widget = self

                self.hovered_row = (event.y - self.bounds.left) / (self.pixel_size + 1)
                self.hovered_column = (event.x - self.bounds.left) / (self.pixel_size + 1)

                if (self.is_drawing) {
                    self.update_glyph_cell(self.hovered_row, self.hovered_column, 255u8)
                } else if (self.is_erasing) {
                    self.update_glyph_cell(self.hovered_row, self.hovered_column, 0u8)
                }
            } else {
                self.hovered_row = -1
                self.hovered_column = -1
            }
            if (last_hovered_row != self.hovered_row || last_hovered_column != self.hovered_column) {
                self.gui.post(make GUI_Event_Widget_Updated(widget = self))
            }
        }
        on_mouse_button_pressed = func (self: GUI_Widget, event: GUI_Event_Mouse_Button_Pressed) -> Nothing {
            let self = self as Glyph_Editor
            self.gui.pressed_widget = self
            if (event.button == 1u8) {
                self.is_drawing = true
                self.update_glyph_cell(self.hovered_row, self.hovered_column, 255u8)
            } else if (event.button == 3u8) {
                self.is_erasing = true
                self.update_glyph_cell(self.hovered_row, self.hovered_column, 0u8)
            }
        }
        on_mouse_button_released = func (self: GUI_Widget, event: GUI_Event_Mouse_Button_Released) -> Nothing {
            if (self.gui.pressed_widget == self) {
                let self = self as Glyph_Editor
                if (event.button == 1u8) {
                    self.is_drawing = false
                } else if (event.button == 2u8 && self.gui.hovered_widget == self as GUI_Widget) {
                    let glyph_mask = self.glyph.mask
                    let glyph_row = 0
                    while (glyph_row < glyph_mask.length as i32) {
                        let glyph_row_mask = glyph_mask[glyph_row]
                        let glyph_column = 0
                        while (glyph_column < glyph_row_mask.length as i32) {
                            glyph_row_mask[glyph_column] = 0u8
                            glyph_column = glyph_column + 1
                        }
                        glyph_row = glyph_row + 1
                    }
                    self.gui.post(make GUI_Event_Widget_Updated(widget = self.gui))
                } else if (event.button == 3u8) {
                    self.is_erasing = false
                }
            }
        }
        measure = measure_glyph_editor
        draw = draw_glyph_editor
    )
    glyph: Glyph
    pixel_size: i32 = 23
    hovered_row: i32 = -1
    hovered_column: i32 = -1
    is_drawing: bool = false
    is_erasing: bool = false
}

define measure_glyph_editor = func (self: GUI_Widget, width_spec: Measure_Spec, height_spec: Measure_Spec) -> Nothing {
    let self = self as Glyph_Editor

    if (width_spec.mode == MEASURE_SPEC_MODE_EXACTLY) {
        self.width_hint = width_spec.size
    } else if (width_spec.mode == MEASURE_SPEC_MODE_LIMITED) {
        let glyph_columns = self.glyph.mask[0].length as i32
        self.width_hint = (self.pixel_size + 1) * glyph_columns + 1
        if (self.width_hint > width_spec.size) {
            self.width_hint = width_spec.size
        }
    } else if (width_spec.mode == MEASURE_SPEC_MODE_UNLIMITED) {
        let glyph_columns = self.glyph.mask[0].length as i32
        self.width_hint = (self.pixel_size + 1) * glyph_columns + 1
    } else {
        self.abort("width", width_spec)
    }

    if (height_spec.mode == MEASURE_SPEC_MODE_EXACTLY) {
        self.height_hint = height_spec.size
    } else if (height_spec.mode == MEASURE_SPEC_MODE_UNLIMITED) {
        let glyph_rows = self.glyph.mask.length as i32
        self.height_hint = (self.pixel_size + 1) * glyph_rows + 1
    } else {
        self.abort("height", width_spec)
    }

    \ stdout.write(self.name).write(" size hint: ").write(self.width_hint).write(" x ").write(self.height_hint).end_line()
}

define draw_glyph_editor = func (self: GUI_Widget, canvas: Canvas) -> Nothing {
    let self = self as Glyph_Editor

    canvas.set_color(COLOR_BACKGROUND)
    canvas.fill_rect(self.bounds)

    canvas.set_color(0xffff00u32)

    let glyph_mask = self.glyph.mask
    let glyph_row = 0
    while (glyph_row <= glyph_mask.length as i32) {
        canvas.draw_horizontal_line(self.bounds.left, self.bounds.right, self.bounds.top + glyph_row * (self.pixel_size + 1))
        glyph_row = glyph_row + 1
    }
    let glyph_column = 0
    while (glyph_column <= glyph_mask[0].length as i32) {
        canvas.draw_vertical_line(self.bounds.left + glyph_column * (self.pixel_size + 1), self.bounds.top, self.bounds.bottom)
        glyph_column = glyph_column + 1
    }

    let glyph_row = 0
    while (glyph_row < glyph_mask.length as i32) {
        let glyph_row_mask = glyph_mask[glyph_row]
        let glyph_column = 0
        while (glyph_column < glyph_row_mask.length as i32) {
            if (glyph_row_mask[glyph_column] != 0u8) {
                canvas.fill_rect(
                    self.bounds.left + glyph_column * (self.pixel_size + 1) + 1
                    self.bounds.top + glyph_row * (self.pixel_size + 1) + 1
                    self.bounds.left + glyph_column * (self.pixel_size + 1) + self.pixel_size
                    self.bounds.top + glyph_row * (self.pixel_size + 1) + self.pixel_size
                )
            }
            glyph_column = glyph_column + 1
        }
        glyph_row = glyph_row + 1
    }

    if (self.hovered_row >= 0 && self.hovered_column >= 0) {
        if (glyph_mask[self.hovered_row][self.hovered_column] == 0u8) {
            canvas.set_color(0x666600u32)
        } else {
            canvas.set_color(0xcccc00u32)
        }
        canvas.fill_rect(
            self.bounds.left + self.hovered_column * (self.pixel_size + 1) + 1
            self.bounds.top + self.hovered_row * (self.pixel_size + 1) + 1
            self.bounds.left + self.hovered_column * (self.pixel_size + 1) + self.pixel_size
            self.bounds.top + self.hovered_row * (self.pixel_size + 1) + self.pixel_size
        )
    }

    canvas.set_color(0xff0000u32)
    canvas.draw_horizontal_line(self.bounds.left, self.bounds.right, self.bounds.top + font.base_line * (self.pixel_size + 1))
}

define update_glyph_cell = macro (self: Glyph_Editor, glyph_row: i32, glyph_column: i32, value: u8) {
    if (self.glyph.mask[glyph_row][glyph_column] != value) {
        self.glyph.mask[glyph_row][glyph_column] = value
        self.gui.post(make GUI_Event_Widget_Updated(widget = self.gui))
    }
}

define glyph_chooser = func (parent: GUI_Layout, selected_glyph: u8) -> Glyph_Chooser {
    let glyph_chooser = make Glyph_Chooser(gui = parent.gui, parent = parent, selected_glyph = selected_glyph)
    parent.add(glyph_chooser)

    let glyph = ' '
    while (glyph <= '~') {
        let button = glyph_chooser.button(make String().append(glyph as u8))
        button.data = make Glyph_Chooser_Button_Data(glyph_chooser = glyph_chooser, glyph = glyph as u8)
        button.on_click = func (self: GUI_Button) -> Nothing {
            let data = (self as GUI_Button).data as Glyph_Chooser_Button_Data
            data.glyph_chooser.handle_glyph_selected(data.glyph)
        }
        glyph = glyph + 1
    }

    return glyph_chooser
}

struct Glyph_Chooser {
    extends GUI_Layout(
        name = "Glyph_Chooser"
        measure = measure_glyph_chooser
        layout = layout_glyph_chooser
        draw = draw_glyph_chooser
    )
    selected_glyph: u8
    handle_glyph_selected: func (self: Glyph_Chooser, glyph: u8) -> Nothing = func (self: Glyph_Chooser, glyph: u8) -> Nothing {
        stderr.write(self.name).write(" doesn't have the 'handle_glyph_selected' callback").end_line()
        abort()
    }
}

struct Glyph_Chooser_Button_Data {
    extends GUI_Data
    glyph_chooser: Glyph_Chooser
    glyph: u8
}

define measure_glyph_chooser = func (self: GUI_Widget, width_spec: Measure_Spec, height_spec: Measure_Spec) -> Nothing {
    let self = self as Glyph_Chooser
    if (width_spec.mode == MEASURE_SPEC_MODE_LIMITED) {
        if (self.width_policy.mode == SIZE_POLICY_MODE_STRETCHED) {
            self.width_hint = width_spec.size
        } else {
            self.abort("width", self.width_policy)
        }
    } else {
        self.abort("width", width_spec)
    }
    if (height_spec.mode == MEASURE_SPEC_MODE_UNLIMITED) {
        self.height_hint = -3
        let child_width_spec = make !Measure_Spec(mode = MEASURE_SPEC_MODE_UNLIMITED)
        let child_height_spec = make !Measure_Spec(mode = MEASURE_SPEC_MODE_UNLIMITED)
        let row_width = 0
        let row_height = 0
        self.for_each_child() {
            child.measure(@child_width_spec, @child_height_spec)
            if (row_width + child.width_hint < self.width_hint) {
                row_width = row_width + child.width_hint + 4
                if (row_height < child.height_hint) {
                    row_height = child.height_hint
                }
            } else {
                row_width = child.width_hint + 4
                self.height_hint = self.height_hint + row_height + 3
                row_height = 0
            }
        }
        self.height_hint = self.height_hint + row_height + 3


        \ self.abort("height", height_spec)
    } else {
        self.abort("height", height_spec)
    }
}

define layout_glyph_chooser = func (self: GUI_Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self as Glyph_Chooser

    self.bounds.set(left, top, right, bottom)

    let row_children = (self.bounds.width + 4) / (self.children_first.widget.width_hint + 4)

    let row_child = 0
    let child_left = left
    let child_top = top
    self.for_each_child() {
        row_child = row_child + 1
        let child_right = left + (self.bounds.width + 4) * row_child / row_children - 5
        if (child_right > right) {
            row_child = 1
            child_left = left
            child_right = left + (self.bounds.width + 4) * row_child / row_children - 5
            child_top = child_top + child.height_hint + 3
        }
        let child_bottom = child_top + child.height_hint - 1
        child.layout(child_left, child_top, child_right, child_bottom)
        child_left = child_right + 5
    }
}

define draw_glyph_chooser = func (self: GUI_Widget, canvas: Canvas) -> Nothing {
    let self = self as Glyph_Chooser

    \ canvas.set_color(0x00ff77u32)
    \ canvas.draw_rect(self.bounds)

    self.for_each_child() {
        child.draw(canvas)
    }
}

define dump_font = func () -> Nothing {
    let file = open_file("editor/Font.data", "w")

    file.write("\\ Copyright (c) 2021, 2023, Stefan Selariu").end_line()
    file.end_line()
    file.write("font.height: ").write(font.height).end_line()
    file.write("font.base_line: ").write(font.base_line).end_line()

    let char = '!' as i32
    while (char < 127) {
        file.end_line()
        file.write("glyph: ").write(char as u8).end_line()
        let glyph = font.glyphs[char]
        file.write("glyph.width: ").write(glyph.width).end_line()
        let row = 0isize
        while (row < glyph.mask.length) {
            let column = 0isize
            while (column < glyph.mask[0].length) {
                let alpha = glyph.mask[row][column] as u32
                if (alpha > 0) {
                    if (alpha < 0x10) {
                        file.write("-")
                    }
                    file.write(alpha, 16u8)
                } else {
                    file.write("--")
                }
                column = column + 1
            }
            file.end_line()
            row = row + 1
        }

        char = char + 1
    }

    file.close()
}
