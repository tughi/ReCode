\ Copyright (c) 2020-2021, Stefan Selariu

include "./gui/GUI.code"
include "./Font_Editor.code"

let text: String

define main = func () -> i32 {
    text = read_file("editor/Editor.code")

    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        stderr.write("Unable to initialize SDL: ").write(SDL_GetError()).end_line()
        return 1
    }

    let window_width = 1024
    let window_height = 768

    let window = SDL_CreateWindow("ReCode".data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, window_width, window_height, SDL_WINDOW_RESIZABLE)
    if (window == null) {
        stderr.write("Failed to create window: ").write(SDL_GetError()).end_line()
        return 1
    }

    let window_surface = SDL_GetWindowSurface(window)
    if (window_surface == null) {
        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
        return 1
    }

    if (window_surface.format.bits_per_pixel != 32u8) {
        stderr.write("Unsupported surface format").end_line()
        return 1
    }

    let canvas = new Canvas(
        pixels = window_surface.pixels
        width = window_surface.width
        height = window_surface.height
        clip_rect = Rect(
            left = 0
            top = 0
            right = window_surface.width - 1
            bottom = window_surface.height - 1
            width = window_surface.width
            height = window_surface.height
        )
    )

    init_font()

    let event: SDL_Event = new SDL_Undefined_Event()

    let gui_event_init = new GUI_Event_Init()
    let gui_event_mouse_button_pressed = new GUI_Event_Mouse_Button_Pressed(button = undefined, x = undefined, y = undefined)
    let gui_event_mouse_button_released = new GUI_Event_Mouse_Button_Released(button = undefined, x = undefined, y = undefined)
    let gui_event_mouse_moved = new GUI_Event_Mouse_Moved(x = undefined, y = undefined)

    let gui = init_gui()
    let glyph_editor: Glyph_Editor
    let save_button: GUI_Button
    gui.horizontal_linear_layout() {
        gui.margin = 32
        gui.spacing = 32

        gui.vertical_linear_layout() {
            gui.spacing = 32

            glyph_editor = gui.glyph_editor(font_glyphs['A' as u8])

            save_button = gui.button("Save")
            save_button.width_policy = Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            save_button.on_click = func (self: GUI_Button) -> Nothing {
                dump_font()
            }
        }

        gui.vertical_linear_layout() {
            gui.width_policy = Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            gui.height_policy = Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            gui.spacing = 32

            let glyph_chooser = gui.glyph_chooser('A' as u8)
            glyph_chooser.width_policy = Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            glyph_chooser.data = new Glyph_Chooser_Data(glyph_editor = glyph_editor)
            glyph_chooser.handle_glyph_selected = func (self: Glyph_Chooser, glyph: u8) -> Nothing {
                let glyph_editor = (self.data as Glyph_Chooser_Data).glyph_editor
                glyph_editor.glyph = font_glyphs[glyph]
            }

            let text = gui.text(text)
            text.width_policy = Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
            text.height_policy = Size_Policy(mode = SIZE_POLICY_MODE_STRETCHED)
        }
    }
    gui.layout(0, 0, canvas.width - 1, canvas.height - 1)

    let draw_gui = true

    loop {
        if (draw_gui) {
            canvas.set_color(COLOR_BACKGROUND)
            canvas.clear()

            gui.draw(canvas)

            SDL_UpdateWindowSurface(window)

            draw_gui = false
        }

        if (SDL_WaitEvent(event) != 0) {
            if (event.type == SDL_QUIT) {
                break
            } else if (event.type == SDL_MOUSEMOTION) {
                let event = event as SDL_MouseMotionEvent
                gui_event_mouse_moved.x = event.x
                gui_event_mouse_moved.y = event.y
                gui.on_mouse_moved(gui_event_mouse_moved)
                draw_gui = true
            } else if (event.type == SDL_MOUSEBUTTONDOWN) {
                let event = event as SDL_MouseButtonEvent
                gui_event_mouse_button_pressed.button = event.button
                gui_event_mouse_button_pressed.x = gui_event_mouse_moved.x
                gui_event_mouse_button_pressed.y = gui_event_mouse_moved.y
                gui.on_mouse_button_pressed(gui_event_mouse_button_pressed)
                draw_gui = true
            } else if (event.type == SDL_MOUSEBUTTONUP) {
                let event = event as SDL_MouseButtonEvent
                gui_event_mouse_button_released.button = event.button
                gui_event_mouse_button_released.x = gui_event_mouse_moved.x
                gui_event_mouse_button_released.y = gui_event_mouse_moved.y
                gui.on_mouse_button_released(gui_event_mouse_button_released)
                draw_gui = true
            } else if (event.type == SDL_WINDOWEVENT) {
                let event = event as SDL_WindowEvent
                if (event.event == SDL_WINDOWEVENT_RESIZED) {
                    let window_surface = SDL_GetWindowSurface(window)
                    if (window_surface == null) {
                        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
                        return 1
                    }
                    canvas.pixels = window_surface.pixels
                    canvas.width = window_surface.width
                    canvas.height = window_surface.height
                    canvas.clip_rect = Rect(
                        left = 0
                        top = 0
                        right = window_surface.width - 1
                        bottom = window_surface.height - 1
                        width = window_surface.width
                        height = window_surface.height
                    )
                    gui.layout(0, 0, canvas.width - 1, canvas.height - 1)
                    draw_gui = true
                }
            }
        }
    }

    SDL_DestroyWindow(window)

    SDL_Quit()
    return 0
}

define Glyph_Chooser_Data = struct {
    extends GUI_Data
    glyph_editor: Glyph_Editor
}
