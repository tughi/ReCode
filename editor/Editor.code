\ Copyright (c) 2020, Stefan Selariu

define main = func () -> i32 {
    define SDL_INIT_VIDEO = 0x20u32

    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        stderr.write("Unable to initialize SDL: ").write(SDL_GetError()).end_line()
        return 1
    }

    SDL_ShowCursor(0)

    let window_width = 1024
    let window_height = 768

    define SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF_0000
    define SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_MASK \| 0

    define SDL_WINDOW_RESIZABLE = 0x0000_0020u32

    let window = SDL_CreateWindow("ReCode".data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, window_width, window_height, SDL_WINDOW_RESIZABLE)
    if (window == null) {
        stderr.write("Failed to create window: ").write(SDL_GetError()).end_line()
        return 1
    }

    let window_surface = SDL_GetWindowSurface(window)
    if (window_surface == null) {
        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
        return 1
    }

    if (window_surface.format.bits_per_pixel != 32u8) {
        stderr.write("Unsupported surface format").end_line()
        return 1
    }

    let canvas = new Canvas(
        pixels = window_surface.pixels
        width = window_surface.width
        height = window_surface.height
        clip_rect = Rect(x = 0, y = 0, width = window_surface.width, height = window_surface.height)
    )

    let event: SDL_Event = new SDL_Undefined_Event()
    define SDL_QUIT = 0x100u32
    define SDL_MOUSEMOTION = 0x400u32
    define SDL_WINDOWEVENT = 0x200u32

    define SDL_WINDOWEVENT_SHOWN = 1u8 \ Window has been shown
    define SDL_WINDOWEVENT_HIDDEN = 2u8 \ Window has been hidden
    define SDL_WINDOWEVENT_EXPOSED = 3u8 \ Window has been exposed and should be redrawn
    define SDL_WINDOWEVENT_MOVED = 4u8 \ Window has been moved to data1, data2
    define SDL_WINDOWEVENT_RESIZED = 5u8 \ Window has been resized to data1xdata2
    define SDL_WINDOWEVENT_SIZE_CHANGED = 6u8 \ The window size has changed, either as a result of an API call or through the system or user changing the window size.
    define SDL_WINDOWEVENT_MINIMIZED = 7u8 \ Window has been minimized
    define SDL_WINDOWEVENT_MAXIMIZED = 8u8 \ Window has been maximized
    define SDL_WINDOWEVENT_RESTORED = 9u8 \ Window has been restored to normal size and position
    define SDL_WINDOWEVENT_ENTER = 10u8 \ Window has gained mouse focus
    define SDL_WINDOWEVENT_LEAVE = 11u8 \ Window has lost mouse focus
    define SDL_WINDOWEVENT_FOCUS_GAINED = 12u8 \ Window has gained keyboard focus
    define SDL_WINDOWEVENT_FOCUS_LOST = 13u8 \ Window has lost keyboard focus
    define SDL_WINDOWEVENT_CLOSE = 14u8 \ The window manager requests that the window be closed
    define SDL_WINDOWEVENT_TAKE_FOCUS = 15u8 \ Window is being offered a focus (should SetWindowInputFocus() on itself or a subwindow, or ignore)
    define SDL_WINDOWEVENT_HIT_TEST = 16u8 \ Window had a hit test that wasn't SDL_HITTEST_NORMAL.

    let frames = 0
    let start_ticks = SDL_GetTicks()
    let frame_ticks = start_ticks + 1000

    let cursor_x = 0
    let cursor_y = 0

    let quit = false
    while (quit == false) {
        while (SDL_PollEvent(event) != 0) {
            if (event.type == SDL_QUIT) {
                quit = true
            } else if (event.type == SDL_MOUSEMOTION) {
                let event = event as SDL_MouseMotionEvent
                cursor_x = event.x
                cursor_y = event.y
            } else if (event.type == SDL_WINDOWEVENT) {
                let event = event as SDL_WindowEvent
                stdout.write("window event: ").write(event.event as u32).end_line()
                if (event.event == SDL_WINDOWEVENT_RESIZED) {
                    let window_surface = SDL_GetWindowSurface(window)
                    if (window_surface == null) {
                        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
                        return 1
                    }
                    canvas.pixels = window_surface.pixels
                    canvas.width = window_surface.width
                    canvas.height = window_surface.height
                    canvas.clip_rect = Rect(x = 0, y = 0, width = window_surface.width, height = window_surface.height)
                }
            }
        }

        canvas.set_color(0x4eu8, 0x9au8, 0x06u8, 0u8)
        canvas.clear()

        let margin = 32
        canvas.clip_rect.x = margin
        canvas.clip_rect.y = margin
        canvas.clip_rect.width = canvas.width - margin - margin
        canvas.clip_rect.height = canvas.height - margin - margin

        canvas.set_color(255u8, 255u8, 0u8, 0u8)
        let factor = 1
        while (factor < 42) {
            let position = frames * factor // (canvas.width + canvas.height)
            if (position < canvas.width) {
                canvas.draw_line(position, 0, canvas.width - position, canvas.height)
            } else {
                canvas.draw_line(canvas.width, position - canvas.width, 0, canvas.height - position + canvas.width)
            }
            factor = factor + 1
        }
        canvas.set_color(0u8, 0u8, 255u8, 0u8)
        let rect_size = frames // canvas.height - canvas.height / 2
        canvas.fill_rect((canvas.width - rect_size) / 2, (canvas.height - rect_size) / 2, (canvas.width + rect_size) / 2, (canvas.height + rect_size) / 2)

        canvas.set_color(0x99u8, 0x66u8, 0x33u8, 0u8)
        canvas.fill_rect(canvas.width - cursor_x, canvas.height - cursor_y, canvas.width - cursor_x + 32, canvas.height - cursor_y + 32)

        canvas.clip_rect.x = 0
        canvas.clip_rect.y = 0
        canvas.clip_rect.width = canvas.width
        canvas.clip_rect.height = canvas.height

        canvas.set_color(0x66u8, 0x66u8, 0x66u8, 0u8)
        canvas.draw_vertical_line(cursor_x + 1, cursor_y - 11, cursor_y + 13)
        canvas.draw_horizontal_line(cursor_x - 11, cursor_x + 13, cursor_y + 1)
        canvas.set_color(0xffu8, 0xffu8, 0xffu8, 0u8)
        canvas.draw_vertical_line(cursor_x, cursor_y - 12, cursor_y + 12)
        canvas.draw_horizontal_line(cursor_x - 12, cursor_x + 12, cursor_y)

        SDL_UpdateWindowSurface(window)

        let ticks = SDL_GetTicks()
        if (ticks > frame_ticks) {
            stdout.write("fps: ").write(frames / ((ticks - start_ticks) / 1000) as i32).end_line()
            frame_ticks = frame_ticks + 1000
        }

        \ SDL_Delay(1u32)

        frames = frames + 1
    }

    SDL_DestroyWindow(window)

    SDL_Quit()
    return 0
}

define abort = func () -> Nothing

include "./Canvas.code"
include "./File.code"
