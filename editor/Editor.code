\ Copyright (c) 2020, Stefan Selariu

define main = func () -> i32 {
    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        stderr.write("Unable to initialize SDL: ").write(SDL_GetError()).end_line()
        return 1
    }

    SDL_ShowCursor(0)

    let window_width = 1024
    let window_height = 768

    let window = SDL_CreateWindow("ReCode".data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, window_width, window_height, SDL_WINDOW_RESIZABLE)
    if (window == null) {
        stderr.write("Failed to create window: ").write(SDL_GetError()).end_line()
        return 1
    }

    let window_surface = SDL_GetWindowSurface(window)
    if (window_surface == null) {
        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
        return 1
    }

    if (window_surface.format.bits_per_pixel != 32u8) {
        stderr.write("Unsupported surface format").end_line()
        return 1
    }

    let canvas = new Canvas(
        pixels = window_surface.pixels
        width = window_surface.width
        height = window_surface.height
        clip_rect = Rect(
            left = 0
            top = 0
            right = window_surface.width - 1
            bottom = window_surface.height - 1
            width = window_surface.width
            height = window_surface.height
        )
    )

    init_gui()

    let event: SDL_Event = new SDL_Undefined_Event()

    let cursor_x = 0
    let cursor_y = 0

    let glyph = font_glyphs['A' as i32]
    glyph.base_line = 12

    let gui = new View(
        context = new View_Context()
        canvas = canvas
    )

    let quit = false
    while (quit == false) {
        if (SDL_WaitEvent(event) != 0) {
            if (event.type == SDL_QUIT) {
                quit = true
            } else if (event.type == SDL_MOUSEMOTION) {
                let event = event as SDL_MouseMotionEvent
                cursor_x = event.x
                cursor_y = event.y

                gui.context.hovered_view = gui.on_mouse_moved(cursor_x, cursor_y)
            } else if (event.type == SDL_WINDOWEVENT) {
                let event = event as SDL_WindowEvent
                \ stdout.write("window event: ").write(event.event as u32).end_line()
                if (event.event == SDL_WINDOWEVENT_RESIZED) {
                    let window_surface = SDL_GetWindowSurface(window)
                    if (window_surface == null) {
                        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
                        return 1
                    }
                    canvas.pixels = window_surface.pixels
                    canvas.width = window_surface.width
                    canvas.height = window_surface.height
                    canvas.clip_rect = Rect(
                        left = 0
                        top = 0
                        right = window_surface.width - 1
                        bottom = window_surface.height - 1
                        width = window_surface.width
                        height = window_surface.height
                    )
                }
            }
        }

        canvas.set_color(0x4eu8, 0x9au8, 0x06u8, 0u8)
        canvas.clear()

        canvas.set_color(0x000000u32)
        canvas.draw_text(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~", 32, 8)

        let gui_action = GUI_ACTION_FIRST
        while (gui_action <= GUI_ACTION_LAST) {
            gui.action = gui_action
            gui.next_annon_child = gui.first_annon_child

            gui.glyph_editor(glyph, 32)

            gui_action = gui_action + 1
        }

        canvas.draw_cursor(cursor_x, cursor_y)

        SDL_UpdateWindowSurface(window)
    }

    SDL_DestroyWindow(window)

    SDL_Quit()
    return 0
}

define draw_cursor = func (canvas: Canvas, x: i32, y: i32) -> Nothing {
    canvas.set_color(0x66u8, 0x66u8, 0x66u8, 0u8)
    canvas.draw_vertical_line(x + 1, y - 11, y + 13)
    canvas.draw_horizontal_line(x - 11, x + 13, y + 1)
    canvas.set_color(0xffu8, 0xffu8, 0xffu8, 0u8)
    canvas.draw_vertical_line(x, y - 12, y + 12)
    canvas.draw_horizontal_line(x - 12, x + 12, y)
}

define glyph_editor = func (context: View, glyph: Glyph, cell_size: i32) -> Nothing {
    let view = context.view(null)

    let rows = glyph.mask.length as i32
    let columns = glyph.mask[0].length as i32

    if (view.action == GUI_ACTION_LAYOUT) {
        view.bounds.set_location(cell_size, cell_size)
        view.bounds.set_size(1 + (cell_size + 1) * columns, 1 + (cell_size + 1) * rows)
    } else if (view.action == GUI_ACTION_DRAW) {
        view.canvas.set_color(0x000000u32)
        view.canvas.fill_rect(view.bounds.left, view.bounds.top, view.bounds.right, view.bounds.bottom)
    }

    let row = 0
    while (row < rows) {
        let column = 0
        while (column < columns) {
            let cell_view = view.view(null)
            if (cell_view.action == GUI_ACTION_LAYOUT) {
                cell_view.bounds.set_size(cell_size, cell_size)
                cell_view.bounds.set_location(view.bounds.left + 1 + column * (cell_size + 1), view.bounds.top + 1 + row * (cell_size + 1))
            } else if (cell_view.action == GUI_ACTION_DRAW) {
                if (cell_view.context.hovered_view == cell_view) {
                    cell_view.canvas.set_color(0xffff00u32)
                } else if (glyph.mask[row][column] == 0u8) {
                    cell_view.canvas.set_color(0xffffffu32)
                } else {
                    cell_view.canvas.set_color(0x000000u32)
                }
                cell_view.canvas.fill_rect(cell_view.bounds.left, cell_view.bounds.top, cell_view.bounds.right, cell_view.bounds.bottom)
            }
            column = column + 1
        }
        row = row + 1
    }
}

define abort = func () -> Nothing

include "./GUI.code"
include "./File.code"
