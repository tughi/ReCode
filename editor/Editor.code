\ Copyright (c) 2020, Stefan Selariu

define main = func () -> i32 {
    let SDL_INIT_VIDEO = 0x20u32

    if (SDL_Init(SDL_INIT_VIDEO) != 0) {
        stderr.write("Unable to initialize SDL: ").write(SDL_GetError()).end_line()
        return 1
    }

    let window_width = 1024
    let window_height = 768

    let SDL_WINDOWPOS_UNDEFINED_MASK = 0x1FFF_0000
    let SDL_WINDOWPOS_UNDEFINED = SDL_WINDOWPOS_UNDEFINED_MASK \| 0

    let window = SDL_CreateWindow("ReCode".data, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, window_width, window_height, 0u32)
    if (window == null) {
        stderr.write("Failed to create window: ").write(SDL_GetError()).end_line()
        return 1
    }

    let window_surface = SDL_GetWindowSurface(window)
    if (window_surface == null) {
        stderr.write("Failed to get window surface: ").write(SDL_GetError()).end_line()
        return 1
    }

    if (window_surface.format.bits_per_pixel != 32u8) {
        stderr.write("Unsupported surface format").end_line()
        return 1
    }

    let clip_size = 300
    let canvas = new Canvas(
        pixels = window_surface.pixels
        width = window_surface.width
        height = window_surface.height
        clip_rect = Rect(
            x = (window_surface.width - clip_size) / 2
            y = (window_surface.height - clip_size) / 2
            width = clip_size
            height = clip_size
        )
    )

    let x = 0
    while (x < window_width) {
        canvas.set_color(255u8, 0u8, 0u8, 0u8)
        canvas.clear()

        canvas.set_color(255u8, 255u8, 0u8, 0u8)
        canvas.draw_line(x, 0, window_width - x, window_height)

        canvas.draw_rect(window_width / 2 - x / 2, window_height / 2 - x / 2, window_width / 2 + x / 2, window_height / 2 + x / 2)

        SDL_UpdateWindowSurface(window)
        \ SDL_Delay(1u32)

        x = x + 1
    }

    let y = 0
    while (y < window_height) {
        canvas.set_color(255u8, 0u8, 0u8, 0u8)
        canvas.clear()

        canvas.set_color(255u8, 255u8, 0u8, 0u8)
        canvas.draw_line(window_width, y, 0, window_height - y)

        canvas.draw_rect(window_width / 2 - y / 2, window_height / 2 - y / 2, window_width / 2 + y / 2, window_height / 2 + y / 2)

        SDL_UpdateWindowSurface(window)
        \ SDL_Delay(1u32)

        y = y + 1
    }

    \ SDL_Delay(1000u32)

    SDL_DestroyWindow(window)

    SDL_Quit()
    return 0
}

define abort = func () -> Nothing

include "./Canvas.code"
include "./File.code"
