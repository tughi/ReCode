\ Copyright (c) 2020, Stefan Selariu

define Canvas = struct {
    pixels: Any
    width: u32
    height: u32
    bits_per_pixel: u8
}

define Color = struct {
    red: u8
    green: u8
    blue: u8
    alpha: u8
}

define clear = func (self: Canvas) -> Nothing {
    \ fast
    let u64s = self.pixels as [u64; ?]
    let u64s_size = self.width * self.height / 2
    let u64s_index = 0u32
    while (u64s_index < u64s_size) {
        u64s[u64s_index] = 0
        u64s_index = u64s_index + 1
    }

    \ slow, but only for the rest
    let u8s = self.pixels as [u8; ?]
    let u8s_size = self.width * self.height * self.bits_per_pixel as u32 / 8
    let u8s_index = u64s_index * 8
    while (u8s_index < u8s_size) {
        u8s[u8s_index] = 0
        u8s_index = u8s_index + 1
    }
}

define draw_pixel = func (self: Canvas, x: i32, y: i32, color: u32) -> Nothing {
    if (x < 0 || x as u32 >= self.width || y < 0 || y as u32 >= self.height) {
        return
    }
    if (self.bits_per_pixel == 32u8) {
        let pixels = self.pixels as [u32; ?]
        let offset = self.width * y as u32 + x as u32
        pixels[offset] = color
    }
}

define draw_line = func (self: Canvas, x1: i32, y1: i32, x2: i32, y2: i32) -> Nothing {
    let dx: i32
    let sx: i32
    if (x1 < x2) {
        dx = x2 - x1
        sx = 1
    } else {
        dx = x1 - x2
        sx = -1
    }
    let dy: i32
    let sy: i32
    if (y1 < y2) {
        dy = y1 - y2
        sy = 1
    } else {
        dy = y2 - y1
        sy = -1
    }
    let err = dx + dy
    let x = x1
    let y = y1
    loop {
        self.draw_pixel(x, y, 0xffffu32)
        if (x == x2 && y == y2) {
            return
        }
        let err2 = err * 2
        if (err2 >= dy) {
            err = err + dy
            x = x + sx
        }
        if (err2 <= dx) {
            err = err + dx
            y = y + sy
        }
    }
}

include "./SDL.code"
