\ Copyright (c) 2020-2021, 2023, Stefan Selariu

include "code/widget/Button.code"
include "code/widget/Scrollbar.code"
include "code/widget/Style.code"
include "code/widget/Text_Widget.code"
include "code/widget/Widget_Group.code"
include "editor/widget/Glyph_Chooser.code"
include "editor/widget/Glyph_Editor.code"

func make_font_editor() -> @Widget_Group {
    let font_editor = make @Font_Editor()

    font_editor.glyph_editor = make @Glyph_Editor(glyph = font.glyphs['A'])
    font_editor.add(font_editor.glyph_editor)

    font_editor.save_button = make @Save_Button(glyph_editor = @font_editor.glyph_editor)
    font_editor.add(font_editor.save_button)

    font_editor.glyph_chooser = make_glyph_chooser(font_editor.glyph_editor)
    font_editor.add(font_editor.glyph_chooser)

    font_editor.text_widget = make @Text_Widget(text = "the quick brown fox jumps over the lazy dog...\nThe Quick Brown Fox Jumps Over The Lazy Dog...\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG...")
    font_editor.add(font_editor.text_widget)

    font_editor.horizontal_scrollbar = make_horizontal_scrollbar(
        content_size = 42
        visible_size = 13
        visible_from = 24
        step = 3
    )
    font_editor.add(font_editor.horizontal_scrollbar)

    font_editor.vertical_scrollbar = make_vertical_scrollbar(
        content_size = 42
        visible_size = 13
        visible_from = 24
        step = 3
    )
    font_editor.add(font_editor.vertical_scrollbar)

    return font_editor
}

struct Font_Editor: Widget_Group(
    layout = layout_font_editor
    draw = draw_font_editor
) {
    glyph_editor: @Glyph_Editor = undefined
    glyph_chooser: @Glyph_Chooser = undefined
    save_button: @Save_Button = undefined
    text_widget: @Text_Widget = undefined
    horizontal_scrollbar: @Horizontal_Scrollbar = undefined
    vertical_scrollbar: @Vertical_Scrollbar = undefined
}

struct Save_Button: Button(
    label = "Save"
    on_click = func (self: @Save_Button) -> Nothing {
        @font.save()
    }
) {
    glyph_editor: @Glyph_Editor
}

func layout_font_editor(self: @Widget, left: i32, top: i32, right: i32, bottom: i32) -> Nothing {
    let self = self.as(@Font_Editor)

    self.layout_widget(left, top, right, bottom)

    define MARGIN = 16

    self.glyph_editor.compute_size_hint()
    self.glyph_editor.layout(
        left + MARGIN
        top + MARGIN
        left + MARGIN + self.glyph_editor.width_hint - 1
        top + MARGIN + self.glyph_editor.height_hint - 1
    )

    self.save_button.compute_size_hint()
    self.save_button.layout(
        self.glyph_editor.left
        self.glyph_editor.bottom + MARGIN + 1
        self.glyph_editor.right
        self.glyph_editor.bottom + MARGIN + self.save_button.height_hint
    )

    self.glyph_chooser.layout(
        self.glyph_editor.right + MARGIN + 1
        self.glyph_editor.top
        right - MARGIN
        bottom - MARGIN
    )

    self.horizontal_scrollbar.compute_size_hint()
    self.vertical_scrollbar.compute_size_hint()

    self.text_widget.layout(
        self.glyph_chooser.left
        self.glyph_chooser.children.last().bottom + MARGIN + 1
        self.glyph_chooser.right - self.vertical_scrollbar.width_hint
        bottom - self.horizontal_scrollbar.height_hint - MARGIN
    )

    self.horizontal_scrollbar.layout(
        self.text_widget.left
        self.text_widget.bottom + 1
        self.text_widget.right + 1
        self.text_widget.bottom + self.horizontal_scrollbar.height_hint
    )

    self.vertical_scrollbar.layout(
        self.text_widget.right + 1
        self.text_widget.top
        self.text_widget.right + self.vertical_scrollbar.width_hint
        self.text_widget.bottom + 1
    )
}

func draw_font_editor(self: @Widget, canvas: @Canvas) -> Nothing {
    canvas.set_color(COLOR_BACKGROUND)
    canvas.fill_rect(self)

    self.draw_widget_group(canvas)
}
