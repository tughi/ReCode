\ Copyright (c) 2020-2021, Stefan Selariu

include "./LibC.code"
include "./String.code"

define write = func (self: FILE, string: String) -> FILE {
    return self.write(string.data)
}

define write = func (file: FILE, chars: [u8; ?]) -> FILE {
    let index = 0isize
    loop {
        let char = chars[index]
        if (char == '\0' as u8) {
            return file
        }
        file.write(char)
        index = index + 1
    }
}

define write = func (file: FILE, number: i32) -> FILE {
    if (number < 0) {
        return file.write('-' as u8).write(-number)
    }
    if (number >= 10) {
        file.write(number / 10)
    }
    fputc(number // 10 + '0' as i32, file)
    return file
}

define write = func (file: FILE, number: u32) -> FILE {
    if (number >= 10) {
        file.write(number / 10)
    }
    fputc((number // 10) as i32 + '0' as i32, file)
    return file
}

define write = func (file: FILE, number: u32, base: u8) -> FILE {
    if (number >= base as u32) {
        file.write(number / base as u32, base)
    }
    let digit = (number // base as u32 * 1) as i32
    if (digit >= 10) {
        fputc(digit - 10 + 'A' as i32, file)
    } else {
        fputc(digit + '0' as i32, file)
    }
    return file
}

define write = func (file: FILE, number: isize) -> FILE {
    if (number < 0) {
        return file.write('-' as u8).write(-number)
    }
    if (number >= 10) {
        file.write(number / 10)
    }
    return file.write((number // 10) as u8 + '0' as u8)
}

define write = func (file: FILE, char: u8) -> FILE {
    fputc(char as i32, file)
    return file
}

define end_line = func (file: FILE) -> FILE {
    return file.write('\n' as u8)
}

define read_file = func (file_path: String) -> String {
    let file = open_file(file_path, "r")
    let content = file.read_all()
    file.close()
    return content
}

define open_file = func (file_path: String, mode: String) -> FILE {
    return fopen(file_path.data, mode.data)
}

define close = func (file: FILE) -> Nothing {
    fclose(file)
}

define read_all = func (file: FILE) -> String {
    if (feof(file) != 0) {
        return null
    }
    let content = "".clone()
    loop {
        let char = fgetc(file)
        if (char < 0) {
            break
        }
        content.append(char as u8)
    }
    return content
}

define read_line = func (file: FILE, line: String) -> bool {
    if (feof(file) != 0) {
        return false
    }
    line.clear()
    loop {
        let char = fgetc(file)
        if (char < 0 || char == '\n' as i32) {
            break
        }
        line.append(char as u8)
    }
    return true
}
