\ Copyright (c) 2020-2021, 2023, Stefan Selariu

include "./LibC.code"
include "./String.code"

func write(self: @FILE, string: @String) -> @FILE {
    return self.write(string.data)
}

func write(file: @FILE, chars: [u8; ?]) -> @FILE {
    let index = 0isize
    loop {
        let char = chars[index]
        if char == '\0'.as(u8) {
            return file
        }
        file.write(char)
        index = index + 1
    }
}

func write(file: @FILE, number: i32) -> @FILE {
    if number < 0 {
        return file.write('-'.as(u8)).write(-number)
    }
    if number >= 10 {
        file.write(number / 10)
    }
    fputc(number // 10 + '0'.as(i32), file)
    return file
}

func write(file: @FILE, number: u32) -> @FILE {
    if number >= 10 {
        file.write(number / 10)
    }
    fputc((number // 10).as(i32) + '0'.as(i32), file)
    return file
}

func write(file: @FILE, number: u32, base: u8) -> @FILE {
    if number >= base.as(u32) {
        file.write(number / base.as(u32), base)
    }
    let digit = (number // base.as(u32) * 1).as(i32)
    if digit >= 10 {
        fputc(digit - 10 + 'A'.as(i32), file)
    } else {
        fputc(digit + '0'.as(i32), file)
    }
    return file
}

func write(file: @FILE, number: isize) -> @FILE {
    if number < 0 {
        return file.write('-'.as(u8)).write(-number)
    }
    if number >= 10 {
        file.write(number / 10)
    }
    return file.write((number // 10).as(u8) + '0'.as(u8))
}

func write(file: @FILE, char: u8) -> @FILE {
    fputc(char.as(i32), file)
    return file
}

func end_line(file: @FILE) -> @FILE {
    return file.write('\n'.as(u8))
}

func read_file(file_path: @String) -> @String {
    let file = open_file(file_path, "r")
    let content = file.read_all()
    file.close()
    return content
}

func open_file(file_path: @String, mode: @String) -> @FILE {
    return fopen(file_path.data, mode.data)
}

func close(file: @FILE) -> Nothing {
    fclose(file)
}

func read_all(file: @FILE) -> @String {
    if feof(file) != 0 {
        return null
    }
    let content = "".clone()
    loop {
        let char = fgetc(file)
        if char < 0 {
            break
        }
        content.append(char.as(u8))
    }
    return content
}

func read_line(file: @FILE, line: @String) -> bool {
    if feof(file) != 0 {
        return false
    }
    line.clear()
    loop {
        let char = fgetc(file)
        if char < 0 or char == '\n'.as(i32) {
            break
        }
        line.append(char.as(u8))
    }
    return true
}
