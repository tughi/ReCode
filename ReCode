#!/usr/bin/env python3

import os
import re
import subprocess
import sys
from collections import OrderedDict
from datetime import datetime


def execute(command, echo=True, exit_on_error=True, expected_return_code=0):
    if echo:
        print(f"[{datetime.now().time().isoformat(timespec='milliseconds')}] {command}")
    return_code = subprocess.call(command.split(' '))
    if return_code != expected_return_code and exit_on_error:
        exit(return_code)
    return return_code


def clean():
    execute('rm -fr build')


def bootstrap():
    if not os.path.exists('build/stage0'):
        execute(f'mkdir -p build/stage0')

    bootstrap_compiler = 'build/stage0/ReCode'
    if not os.path.exists(bootstrap_compiler) or os.path.getmtime('bootstrap/ReCode.s') > os.path.getmtime(bootstrap_compiler):
        execute(f'gcc -g -o {bootstrap_compiler} bootstrap/ReCode.s')


def build_stage(n):
    if not os.path.exists(f'build/stage{n}'):
        execute(f'mkdir build/stage{n}')

    compiler = f'build/stage{n - 1}/ReCode'
    source_file = f'compiler/ReCode.code'
    output_file = f'build/stage{n}/ReCode.s'
    compiler_args = f'{source_file} {output_file}'

    source_changed = False
    for root, dirs, files in os.walk(os.path.dirname(source_file)):
        for file in files:
            if os.path.getmtime(output_file) < os.path.getmtime(f'{root}/{file}'):
                source_changed = True
                break
        else:
            continue
        break

    if source_changed or not os.path.exists(output_file) or os.path.getmtime(output_file) < os.path.getmtime(compiler):
        if execute(f'{compiler} {compiler_args}', exit_on_error=False) != 0:
            subprocess.run(f'''gdb -batch -ex='set confirm off' -ex='set style enabled on' -ex='run {compiler_args} &> /dev/null' -ex=bt -ex=quit --args {compiler}''', shell=True)
            exit(1)
        execute(f'gcc -g -o build/stage{n}/ReCode {output_file}', echo=True)


def examples():
    if not os.path.exists(f'build/examples'):
        execute(f'mkdir build/examples')

    for example in os.listdir('examples'):
        if not example.endswith('.code'):
            continue

        with open(f'examples/{example}') as example_file:
            is_program = False
            for line in example_file:
                if line.startswith('main :: ('):
                    is_program = True
                    break
            if not is_program:
                continue

        args = f'examples/{example} build/examples/{example[:-5]}.s'
        if execute(f'build/stage1/ReCode {args}', exit_on_error=False) != 0:
            subprocess.run(f'''gdb -batch -ex='set confirm off' -ex='set style enabled on' -ex='run {args} &> /dev/null' -ex=bt -ex=quit --args build/stage1/ReCode''', shell=True)
            print()
            exit(1)
        execute(f'gcc -g -o build/examples/{example[:-5]} build/examples/{example[:-5]}.s', echo=True)
        execute(f'build/examples/{example[:-5]}', echo=True)


def build():
    bootstrap()
    build_stage(1)
    examples()
    build_stage(2)

def stage():
    bootstrap()
    build_stage(1)
    build_stage(2)
    build_stage(3)
    execute('diff -q build/stage2/ReCode.s build/stage3/ReCode.s')
    execute('cp compiler/ReCode.code bootstrap/ReCode.code')
    execute('build/stage2/ReCode bootstrap/ReCode.code bootstrap/ReCode.s')
    bootstrap()


TASKS = OrderedDict(
    clean=clean,
    build=build,
    stage=stage,
)

if len(sys.argv) > 1:
    for task_name in sys.argv[1:]:
        if task_name in TASKS:
            TASKS[task_name]()
        else:
            print(f"Unrecognized task: {task_name}")
else:
    print(f"Usage: {sys.argv[0]} [ {' | '.join(TASKS.keys())} ]+ ")
