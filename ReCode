#!/usr/bin/env python3

import logging
import os
import re
import subprocess
import sys
from collections import OrderedDict
from datetime import datetime

logging.basicConfig(format='[%(asctime)s,%(msecs)03d][%(levelname).1s] %(message)s', datefmt='%H:%M:%S')

logger = logging.getLogger('ReCode')
logger.setLevel(logging.DEBUG)

COLOR_DEBUG = '\x1b[2;37m'
COLOR_ERROR = '\x1b[0;91m'
COLOR_WARNING = '\x1b[0;93m'
COLOR_RESET = '\x1b[0m'


def clean():
    logger.info("Cleaning")
    run('rm -fr build stage0')


def run(command, **kwargs):
    if isinstance(command, str):
        command = command.split(' ')
    logger.debug(f"{COLOR_DEBUG}{' '.join(command)}{COLOR_RESET}")
    if 'check' not in kwargs:
        kwargs['check'] = True
    return subprocess.run(command, **kwargs)


def build_stage(n):
    logger.info(f"Building stage{n}")

    if not os.path.exists(f'build/stage{n}'):
        run(f'mkdir -p build/stage{n}')

    if n == 0:
        assemble('bootstrap/ReCode.s', f'build/stage{n}/ReCode')
        return

    if n == 1:
        compiler = 'compiler'
    else:
        compiler = 'stage0'

    compiler_changed = not os.path.exists(f'build/stage{n}/ReCode.s') or os.path.getmtime(f'build/stage{n}/ReCode.s') < os.path.getmtime(f'build/stage{n - 1}/ReCode')
    if not compiler_changed:
        for root, dirs, files in os.walk(compiler):
            for file in files:
                if os.path.getmtime(f'build/stage{n}/ReCode.s') < os.path.getmtime(f'{root}/{file}'):
                    compiler_changed = True
                    break
            else:
                continue
            break

    if compiler_changed or not os.path.exists(f'build/stage{n}/ReCode'):
        if run([f'build/stage{n - 1}/ReCode', f'{compiler}/ReCode.code', f'build/stage{n}/ReCode.s'], check=False).returncode != 0:
            if os.path.exists(f'build/stage{n}/ReCode.s'):
                run(f'rm build/stage{n}/ReCode.s')
            trace(f'build/stage{n - 1}/ReCode', f'{compiler}/ReCode.code', '-')
            exit(1)
        try:
            assemble(f'build/stage{n}/ReCode.s', f'build/stage{n}/ReCode', check=True)
        except:
            if os.path.exists(f'build/stage{n}/ReCode'):
                execute(f'rm build/stage{n}/ReCode')
            raise


def assemble(source_file, output_file, sdl=False, **kwargs):
    if not os.path.exists(output_file) or os.path.getmtime(source_file) > os.path.getmtime(output_file):
        run(['gcc', source_file, '-o', output_file, '-g', '-no-pie', '-Wl,-z,noexecstack', *(['-lSDL2'] if sdl else [])], **kwargs)


def trace(*command, ignore_output=True):
    logger.info(f"Tracing: {' '.join(command)}")
    subprocess.run(
        ' '.join([
            'gdb',
            command[0],
            '-batch',
            '-ex=\'set confirm off\'',
            '-ex=\'set style enabled on\'',
            '-ex=\'set print thread-events off\'',
            f'-ex=\'run {" ".join(command[1:])} > /dev/null 2> /dev/null\'' if ignore_output else f'-ex=\'run {" ".join(command[1:])}\'',
            '-ex=backtrace',
            '-ex=quit',
        ]),
        shell=True,
    )


def test_with_stage(n):
    if not os.path.exists(f'build/tests'):
        run(f'mkdir build/tests')

    for test_file_name in sorted(os.listdir('tests')):
        if not test_file_name.endswith('.code'):
            continue

        expected_error = None
        expected_output = None
        with open(f'tests/{test_file_name}') as test_file:
            line = next(test_file)
            if line == '\\ Expect:\n':
                line = next(test_file)
                line_match = re.match(r'\\ - (error|output): (.*)\n', line)
                if line_match:
                    if line_match.group(1) == 'error':
                        expected_error = line_match.group(2)
                    else:
                        expected_output = line_match.group(2)
            elif line == '\\ Skip\n':
                logger.info(f"Skipping: tests/{test_file_name}")
                continue
            if expected_error is None and expected_output is None:
                logger.warning(f"{COLOR_WARNING}Skipping unsupported test: tests/{test_file_name}{COLOR_RESET}")
                continue

        # TODO: Check if compile is needed
        compiler_command = [f'build/stage{n}/ReCode', f'tests/{test_file_name}', f'build/tests/{test_file_name[:-5]}.s', f'build/tests/{test_file_name[:-5]}.ir']
        logger.info(f"Testing: {compiler_command[1]}")

        compiler_result = run(compiler_command, check=False, capture_output=True, text=True)

        if compiler_result.returncode != 0:
            compiler_error = repr(re.sub(r'\x1b\[[0-9;]+m', '', compiler_result.stderr)) if compiler_result.stderr else None
            if expected_error is None or expected_error != compiler_error:
                print(compiler_result.stderr, end='')
                logger.error(f"{COLOR_ERROR}Unexpected compiler error{COLOR_RESET}: {compiler_error}")
                logger.error(f"{COLOR_WARNING}Expected compiler error{COLOR_RESET}: {expected_error}")
                trace(*compiler_command[:2], '-')
                exit(1)
        else:
            print(compiler_result.stderr, end='')

            if expected_error:
                logger.error(f"{COLOR_ERROR}Expected compile error{COLOR_RESET}")
                exit(1)

            assemble(f'build/tests/{test_file_name[:-5]}.s', f'build/tests/{test_file_name[:-5]}')

            test_result = run([f'build/tests/{test_file_name[:-5]}'], capture_output=expected_output is not None, text=True, check=False)
            if test_result.returncode != 0:
                logger.error(f"{COLOR_ERROR}Unexpected exit code: {test_result.returncode}{COLOR_RESET}")
                exit(test_result.returncode)
            if expected_output and repr(test_result.stdout) != expected_output:
                logger.error(f"{COLOR_ERROR}Unexpected output: {repr(test_result.stdout)}{COLOR_RESET}")
                exit(1)


def build():
    build_stage(0)
    build_stage(1)

    if subprocess.run('turnt tests/ir/*.code', shell=True).returncode != 0:
        exit(1)

    test_with_stage(1)


def stage():
    build()

    logger.info("Staging")

    if not os.path.exists('stage0'):
        run('cp -R compiler stage0')

    build_stage(2)
    build_stage(3)
    run('diff -q build/stage2/ReCode.s build/stage3/ReCode.s', check=True)

    test_with_stage(3)

    run('rm -fr bootstrap')
    run('mkdir bootstrap')
    run('mv stage0 bootstrap/')
    run('build/stage2/ReCode bootstrap/stage0/ReCode.code bootstrap/ReCode.s')

    run('rm -fr compiler')
    run('cp -R bootstrap/stage0 compiler')


def editor():
    build_stage(0)
    build_stage(1)

    if not os.path.exists(f'build/editor'):
        run(f'mkdir build/editor')

    compiler_command = ['build/stage1/ReCode', 'editor/Editor.code', 'build/editor/Editor.s', 'build/editor/Editor.ir']
    if run(compiler_command, check=False).returncode != 0:
        trace(*compiler_command[:2], '-')
        exit(1)
    assemble('build/editor/Editor.s', 'build/editor/Editor', sdl=True)
    trace('build/editor/Editor', ignore_output=False)


def time():
    build_stage(0)
    build_stage(1)

    count = 10
    start_time = datetime.now()
    for _ in range(count):
        run('build/stage1/ReCode compiler/ReCode.code build/stage2/ReCode.s')
    finish_time = datetime.now()

    logger.info(f"Average time: {((finish_time - start_time) / count).total_seconds()}s")


TASKS = OrderedDict(
    clean=clean,
    build=build,
    editor=editor,
    stage=stage,
    time=time,
)

if len(sys.argv) > 1:
    for task_name in sys.argv[1:]:
        if task_name in TASKS:
            TASKS[task_name]()
        else:
            print(f"Unrecognized task: {task_name}")
else:
    print(f"Usage: {sys.argv[0]} [ {' | '.join(TASKS.keys())} ]+ ")
