Source :: struct {
    data: @[Char]
    current_index: Int = 0
    current_line: Int = 1
    current_column: Int = 1
}

\ returns the next character that will be consumed
peek :: (self: @Source) -> Char {
	if (self.current_index < self.data.length) {
		return self.data[self.current_index]
	}
	return 0
}

\ consume and return the current character if it's accepted by the provided function
consume :: (self: @Source, accepted: (char: Char) -> Bool) -> Char {
	if (self.current_index < self.data.length) {
		current := self.data[self.current_index]
		if (accepted(current)) {
			self.current_index += 1
			if (current == '\n') {
				self.current_line += 1
				self.current_column = 1
			} else {
				self.current_column += 1
			}
			return current
		}
	}
	return 0
}

main :: () {
	source := Source("Hello world!")

	is_valid :: (char: Char) -> Bool {
		return char > 0 && char < 128
	}

	loop {
		consumed := source.consume(is_valid)
		if (consumed == 0) {
			break
		}
		if (consumed == '!') {
			skip
		}
		echo(consumed)
	}
}
