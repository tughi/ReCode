rfib :: (n: Int) -> Int {
	if (n < 2) {
		return n
	}
	return rfib(n - 1) + rfib(n - 2)
}

lfib :: (n: Int) -> Int {
	if (n < 2) {
		return n
	}
	v_0 := 0
	v_1 := 1
	v_i := v_0 + v_1
	i := 2
	loop {
		if (i == n) {
			return v_i
		}
		v_0 = v_1
		v_1 = v_i
		v_i = v_0 + v_1
		i = i + 1
	}
}

print_number :: (n: Int) {
	if (n > 9) {
		print_number(n / 10)
	}
	fputc('0' as Int + (n - n / 10 * 10), stdout)
	return 0
}

main :: () {
	n := 0
	i := 0
	loop {
		n = lfib(i)
		print_number(i)
		fputc(' ' as Int, stdout)
		fputc('-' as Int, stdout)
		fputc(' ' as Int, stdout)
		print_number(n)
		fputc('\n' as Int, stdout)
		if (i < 42 && lfib(i) == rfib(i)) {
			i = i + 1
		} else {
			break
		}
	}
	fputc('\n' as Int, stdout)
	return 0
}
