FILE :: struct

stdin: @FILE = external
stdout: @FILE = external
stderr: @FILE = external

fputc :: (char: Int, file: @FILE) -> Int

fputs :: (string: @Char, file: @FILE) -> Int

print_char :: (char: Char) -> Int {
	return fputc(char as Int, stdout)
}

print_cstring :: (message: @Char) -> Nothing {
	fputs(message, stdout)
	return
}

print_number :: (n: Int) -> Nothing {
	if (n >= 10) {
		print_number(n / 10)
	}
	print_char('0' + (n // 10) as Char)
	return
}

String :: struct {
	chars: @Char
	length: Int = 0
}

String :: (chars: @Char) -> String {
	self: String
	self.chars = chars
	self.length = 0
	loop {
		if (chars[self.length] == 0) {
			break
		}
		self.length += 1
	}
	return self
}

Source :: struct {
	content: String
    current_index: Int
    current_line: Int
    current_column: Int
}

advance :: (@self: Source) -> Bool {
	if (self.current_index < self.content.length) {
		self.current_index += 1
		return true
	}
	return false
}

current :: (@self: Source) -> Char {
	return self.content.chars[self.current_index]
}

main :: () -> Int {
	source: Source
	source.content = String("Hello 2020!")
	source.current_index = -1
	source.current_line = 1
	source.current_column = 1

	loop {
		if (advance(source)) {
			print_char(current(source))
		} else {
			break
		}
	}

	print_char('\n')

	return -1
}
