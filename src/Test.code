FILE :: struct

stdin: @FILE = external
stdout: @FILE = external
stderr: @FILE = external

fputc :: (char: Int, file: @FILE) -> Int

fputs :: (string: @Char, file: @FILE) -> Int

putc :: (char: Char) -> Int {
	char := char as Int
	return fputc(char, stdout)
}

puts :: (message: @Char) -> Nothing {
	fputs(message, stdout)
	return
}

rfib :: (n: Int) -> Int {
	if (n < 2) {
		return n
	}
	return rfib(n - 1) + rfib(n - 2)
}

lfib :: (n: Int) -> Int {
	if (n < 2) {
		return n
	}
	v_0 := 0
	v_1 := 1
	v_i := v_0 + v_1
	i := 2
	loop {
		if (i == n) {
			return v_i
		}
		v_0 = v_1
		v_1 = v_i
		v_i = v_0 + v_1
		i += 1
	}
}

print_number :: (n: Int) -> Nothing {
	if (n >= 10) {
		print_number(n / 10)
	}
	putc('0' + (n // 10) as Char)
	return
}

Number :: struct {
	value: Int
	next : @Number
}

main :: () -> Int {
	i := 0
	loop {
		n := lfib(i)
		print_number(i)
		puts(" - ")
		print_number(n)
		puts(" - ")
		print_number(n // 10)
		putc('\n')
		if (i < 32 && n == rfib(i)) {
			i += 1
		} else {
			break
		}
	}
	puts("\nHello 2020!\n\n")
	return -1
}
