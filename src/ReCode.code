main :: (argc: Int, argv: @@Int8) -> Int {
	if (argc != 3) {
		stdout.write("Usage:\n\t").write(argv[0]).write(" <INPUT FILE> <OUTPUT FILE>\n")
		exit(1)
	}

	\ TODO: validate arguments

	output_file: @LibC_FILE = fopen(argv[2], "w")
	output_file.write("  .file 1 \"").write(argv[1]).write("\"\n")

	return 0
}

write :: (self: @LibC_FILE, string: @Int8) -> @LibC_FILE {
	index: Int = 0
	loop {
		char: Int8 = string[index]
		if (char == '\0') {
			break
		}
		self.write(char)
		index = index + 1
	}
	return self
}

write :: (self: @LibC_FILE, char: Int8) -> @LibC_FILE {
	c: Int32 = char as Int32
	if (fputc(c, self) != c) {
		panic("Hmmm...")
	}
	return self
}

panic :: (message: @Int8) -> Nothing {
	stdout.write(message).write('\n')
	raise(6) 	\ abort
}

exit :: (code: Int) -> Nothing

LibC_FILE :: struct

stdout: @LibC_FILE = external
stderr: @LibC_FILE = external

fopen :: (file: @Int8, mode: @Int8) -> @LibC_FILE

fputc :: (c: Int32, file: @LibC_FILE) -> Int32

raise :: (signal: Int) -> Nothing
